{
  "version": 3,
  "sources": ["../../../../node_modules/.pnpm/@douyinfe+semi-foundation@2.34.0/node_modules/@douyinfe/semi-foundation/lib/es/datePicker/_utils/parser.js"],
  "sourcesContent": ["/**\n * @file\n * Various date-related analysis methods\n */\nimport { isValid, parseISO, parse } from 'date-fns';\n/**\n * Parsing value to Date object\n */\n\nexport function compatibleParse(value, formatToken, baseDate, locale) {\n  let result = null;\n\n  if (value) {\n    if (formatToken) {\n      baseDate = baseDate || new Date();\n      result = parse(value, formatToken, baseDate, {\n        locale\n      });\n    }\n\n    if (!isValid(result)) {\n      result = parseISO(value);\n    }\n\n    if (!isValid(result)) {\n      result = new Date(Date.parse(value));\n    }\n\n    const yearInvalid = isValid(result) && String(result.getFullYear()).length > 4;\n\n    if (!isValid(result) || yearInvalid) {\n      result = null;\n    }\n  }\n\n  return result;\n}\n/**\n * whether value can be parsed with date-fns `parse`\n *\n * @example\n * isValueParseValid({ value: '2021-01-01', formatToken: 'yyyy-MM-dd' }); // true\n * isValueParseValid({ value: '2021-01-0', formatToken: 'yyyy-MM-dd' }); // false\n * isValueParseValid({ value: '2021-01', formatToken: 'yyyy-MM-dd' }); // false\n */\n\nexport function isValueParseValid(options) {\n  const {\n    value,\n    locale,\n    formatToken\n  } = options;\n  const baseDate = options.baseDate || new Date();\n  const result = parse(value, formatToken, baseDate, {\n    locale\n  });\n  return isValid(result);\n}"],
  "mappings": ";;;;;;;AASO,SAAS,gBAAgB,OAAO,aAAa,UAAU,QAAQ;AACpE,MAAI,SAAS;AAEb,MAAI,OAAO;AACT,QAAI,aAAa;AACf,iBAAW,YAAY,oBAAI,KAAK;AAChC,eAAS,MAAM,OAAO,aAAa,UAAU;AAAA,QAC3C;AAAA,MACF,CAAC;AAAA,IACH;AAEA,QAAI,CAAC,QAAQ,MAAM,GAAG;AACpB,eAAS,SAAS,KAAK;AAAA,IACzB;AAEA,QAAI,CAAC,QAAQ,MAAM,GAAG;AACpB,eAAS,IAAI,KAAK,KAAK,MAAM,KAAK,CAAC;AAAA,IACrC;AAEA,UAAM,cAAc,QAAQ,MAAM,KAAK,OAAO,OAAO,YAAY,CAAC,EAAE,SAAS;AAE7E,QAAI,CAAC,QAAQ,MAAM,KAAK,aAAa;AACnC,eAAS;AAAA,IACX;AAAA,EACF;AAEA,SAAO;AACT;AAUO,SAAS,kBAAkB,SAAS;AACzC,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,EACF,IAAI;AACJ,QAAM,WAAW,QAAQ,YAAY,oBAAI,KAAK;AAC9C,QAAM,SAAS,MAAM,OAAO,aAAa,UAAU;AAAA,IACjD;AAAA,EACF,CAAC;AACD,SAAO,QAAQ,MAAM;AACvB;",
  "names": []
}
