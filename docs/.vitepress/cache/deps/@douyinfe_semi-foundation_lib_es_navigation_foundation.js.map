{
  "version": 3,
  "sources": ["../../../../node_modules/.pnpm/@douyinfe+semi-foundation@2.34.0/node_modules/@douyinfe/semi-foundation/lib/es/navigation/foundation.js", "../../../../node_modules/.pnpm/@douyinfe+semi-foundation@2.34.0/node_modules/@douyinfe/semi-foundation/lib/es/navigation/NavItem.js"],
  "sourcesContent": ["import _get from \"lodash/get\";\n\n/* eslint-disable max-depth */\n\n/* eslint-disable max-len */\nimport BaseFoundation from '../base/foundation';\nimport NavItem from './NavItem';\nimport { strings } from './constants';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nexport default class NavigationFoundation extends BaseFoundation {\n  constructor(adapter) {\n    super(Object.assign({}, adapter));\n  }\n  /* istanbul ignore next */\n\n\n  static getZeroParentKeys() {\n    let itemKeysMap = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const willAddKeys = [];\n\n    for (var _len = arguments.length, itemKeys = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      itemKeys[_key - 1] = arguments[_key];\n    }\n\n    if (itemKeys.length) {\n      for (const itemKey of itemKeys) {\n        if (Array.isArray(itemKeysMap[itemKey]) && itemKeysMap[itemKey].length) {\n          const levelZeroParentKey = itemKeysMap[itemKey][0];\n\n          if (!isNullOrUndefined(levelZeroParentKey)) {\n            willAddKeys.push(levelZeroParentKey);\n          }\n        }\n      }\n    }\n\n    return willAddKeys;\n  }\n\n  static buildItemKeysMap() {\n    let items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let keysMap = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let parentKeys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    let keyPropName = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'itemKey';\n\n    if (Array.isArray(items) && items.length) {\n      for (const item of items) {\n        if (Array.isArray(item)) {\n          NavigationFoundation.buildItemKeysMap(item, keysMap, [...parentKeys], keyPropName);\n        } else {\n          let itemKey;\n\n          if (item && typeof item === 'object') {\n            itemKey = item[keyPropName] || item.props && item.props[keyPropName];\n          }\n\n          if (itemKey) {\n            keysMap[itemKey] = [...parentKeys];\n\n            if (Array.isArray(item.items) && item.items.length) {\n              NavigationFoundation.buildItemKeysMap(item.items, keysMap, [...parentKeys, itemKey], keyPropName);\n            } else if (item.props && item.props.children) {\n              const children = Array.isArray(item.props.children) ? item.props.children : [item.props.children];\n              NavigationFoundation.buildItemKeysMap(children, keysMap, [...parentKeys, itemKey], keyPropName);\n            }\n          }\n        }\n      }\n    }\n\n    return keysMap;\n  }\n  /**\n   * init is called in constructor and componentDidMount.\n   * if you want to update state in constructor, please add it to return object;\n   * if you want to update state in componentDidMount, please call adapter in else logic.\n   * @param {*} lifecycle\n   * @returns\n   */\n\n\n  init(lifecycle) {\n    const {\n      defaultSelectedKeys,\n      selectedKeys\n    } = this.getProps();\n    let willSelectedKeys = selectedKeys || defaultSelectedKeys || [];\n    const {\n      itemKeysMap,\n      willOpenKeys,\n      formattedItems\n    } = this.getCalcState();\n    const parentSelectKeys = this.selectLevelZeroParentKeys(itemKeysMap, willSelectedKeys);\n    willSelectedKeys = willSelectedKeys.concat(parentSelectKeys);\n\n    if (lifecycle === 'constructor') {\n      return {\n        selectedKeys: willSelectedKeys,\n        itemKeysMap,\n        openKeys: willOpenKeys,\n        items: formattedItems\n      };\n    } else {\n      this._adapter.updateSelectedKeys(willSelectedKeys);\n\n      this._adapter.setItemKeysMap(itemKeysMap);\n\n      this._adapter.updateOpenKeys(willOpenKeys);\n\n      this._adapter.updateItems(formattedItems);\n\n      this._adapter.setItemsChanged(true);\n    }\n\n    return undefined;\n  }\n  /**\n   * Get the state to be calculated\n   */\n\n\n  getCalcState() {\n    const {\n      itemKeysMap,\n      formattedItems\n    } = this.getFormattedItems();\n    const willOpenKeys = this.getWillOpenKeys(itemKeysMap);\n    return {\n      itemKeysMap,\n      willOpenKeys,\n      formattedItems\n    };\n  }\n  /**\n   * Calculate formatted items and itemsKeyMap\n   */\n\n\n  getFormattedItems() {\n    const {\n      items,\n      children\n    } = this.getProps();\n    const formattedItems = this.formatItems(items);\n    const willHandleItems = Array.isArray(items) && items.length ? formattedItems : children;\n    const itemKeysMap = NavigationFoundation.buildItemKeysMap(willHandleItems);\n    return {\n      itemKeysMap,\n      formattedItems\n    };\n  }\n  /**\n   * Calculate the keys that will need to be opened soon\n   * @param {*} itemKeysMap\n   */\n\n\n  getWillOpenKeys(itemKeysMap) {\n    const {\n      defaultOpenKeys,\n      openKeys,\n      defaultSelectedKeys,\n      selectedKeys,\n      mode\n    } = this.getProps();\n    let willOpenKeys = openKeys || defaultOpenKeys || [];\n\n    if (!(Array.isArray(defaultOpenKeys) || Array.isArray(openKeys)) && mode === strings.MODE_VERTICAL && (Array.isArray(defaultSelectedKeys) || Array.isArray(selectedKeys))) {\n      const currentSelectedKeys = Array.isArray(selectedKeys) ? selectedKeys : defaultSelectedKeys;\n      willOpenKeys = this.getShouldOpenKeys(itemKeysMap, currentSelectedKeys);\n    }\n\n    return [...willOpenKeys];\n  }\n\n  getShouldOpenKeys() {\n    let itemKeysMap = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let selectedKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    const willOpenKeySet = new Set();\n\n    if (Array.isArray(selectedKeys) && selectedKeys.length) {\n      selectedKeys.forEach(item => {\n        if (item) {\n          const parentKeys = _get(itemKeysMap, item);\n\n          if (Array.isArray(parentKeys)) {\n            parentKeys.forEach(k => willOpenKeySet.add(k));\n          }\n        }\n      });\n    }\n\n    return [...willOpenKeySet];\n  }\n\n  destroy() {} // eslint-disable-line\n\n\n  selectLevelZeroParentKeys(itemKeysMap) {\n    const _itemKeysMap = isNullOrUndefined(itemKeysMap) ? this.getState('itemKeysMap') : itemKeysMap; // console.log(itemKeysMap);\n\n\n    const willAddKeys = [];\n\n    for (var _len2 = arguments.length, itemKeys = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      itemKeys[_key2 - 1] = arguments[_key2];\n    }\n\n    if (itemKeys.length) {\n      for (const itemKey of itemKeys) {\n        if (Array.isArray(_itemKeysMap[itemKey]) && _itemKeysMap[itemKey].length) {\n          const levelZeroParentKey = _itemKeysMap[itemKey][0];\n\n          if (!isNullOrUndefined(levelZeroParentKey)) {\n            willAddKeys.push(levelZeroParentKey);\n          }\n        }\n      }\n    }\n\n    if (willAddKeys.length) {\n      return willAddKeys;\n    }\n\n    return [];\n  }\n\n  formatItems() {\n    let items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    const formattedItems = [];\n\n    for (const item of items) {\n      formattedItems.push(new NavItem(item));\n    }\n\n    return formattedItems;\n  }\n\n  handleSelect(data) {\n    this._adapter.notifySelect(data);\n  }\n  /* istanbul ignore next */\n\n\n  judgeIfOpen(openKeys, items) {\n    let shouldBeOpen = false;\n\n    const _openKeys = Array.isArray(openKeys) ? openKeys : openKeys && [openKeys];\n\n    if (_openKeys && Array.isArray(items) && items.length) {\n      for (const item of items) {\n        shouldBeOpen = _openKeys.includes(item.itemKey) || this.judgeIfOpen(_openKeys, item.items);\n\n        if (shouldBeOpen) {\n          break;\n        }\n      }\n    }\n\n    return shouldBeOpen;\n  }\n\n  handleCollapseChange() {\n    const isCollapsed = !this.getState('isCollapsed');\n\n    if (!this._isControlledComponent('isCollapsed')) {\n      this._adapter.setIsCollapsed(isCollapsed);\n    }\n\n    this._adapter.notifyCollapseChange(isCollapsed);\n  }\n\n  handleItemsChange(isChanged) {\n    this._adapter.setItemsChanged(isChanged);\n  }\n\n}", "import { numbers } from './constants';\nexport const DEFAULT_TOGGLE_ICON = {\n  open: 'chevron_up',\n  closed: 'chevron_down'\n};\nexport default class NavItem {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    // eslint-disable-next-line eqeqeq\n    if (options == null || typeof options !== 'object') {\n      // eslint-disable-next-line no-param-reassign\n      options = {\n        text: options,\n        itemKey: options,\n        maxHeight: numbers.DEFAULT_SUBNAV_MAX_HEIGHT,\n        // selected: false,\n        // isOpen: false,\n        link: null,\n        items: null,\n        icon: '',\n        indent: false\n      };\n    }\n\n    for (const key of Object.keys(options)) {\n      this[key] = options[key];\n    }\n\n    if (options.items && Array.isArray(options.items) && options.items.length) {\n      this.items = options.items.map(item => new NavItem(item));\n\n      if ('toggleIcon' in options) {\n        this.toggleIcon = NavItem.isValidToggleIcon(options.toggleIcon) ? Object.assign({}, options.toggleIcon) : Object.assign({}, DEFAULT_TOGGLE_ICON);\n      } else {\n        this.toggleIcon = Object.assign({}, DEFAULT_TOGGLE_ICON);\n      }\n    } else {\n      this.items = null;\n    }\n  }\n\n  static isValidToggleIcon(toggleIcon) {\n    return Boolean(toggleIcon && typeof toggleIcon === 'object' && typeof toggleIcon.open === 'string' && toggleIcon.open.length && typeof toggleIcon.closed === 'string' && toggleIcon.closed.length);\n  }\n\n}"],
  "mappings": "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",
  "names": ["_get"]
}
