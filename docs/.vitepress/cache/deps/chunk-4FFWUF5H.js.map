{
  "version": 3,
  "sources": ["../../../../node_modules/.pnpm/@douyinfe+semi-foundation@2.34.0/node_modules/@douyinfe/semi-foundation/lib/es/cascader/util.js"],
  "sourcesContent": ["import _isEqual from \"lodash/isEqual\";\nimport _isUndefined from \"lodash/isUndefined\";\nimport _isNull from \"lodash/isNull\";\nimport { strings } from './constants';\n\nfunction getPosition(level, index) {\n  return `${level}-${index}`;\n}\n\nexport function isValid(val) {\n  return !_isNull(val) && !_isUndefined(val);\n}\nexport function normalizedArr(val) {\n  if (!Array.isArray(val)) {\n    return [val];\n  } else {\n    return val;\n  }\n}\n/**\n * Traverse all the data by `treeData`.\n */\n\nfunction traverseDataNodes(treeNodes, callback) {\n  const processNode = (node, ind, parent) => {\n    const children = node ? node.children : treeNodes;\n    let item = null; // Process node if is not root\n\n    if (node) {\n      const key = parent ? getPosition(parent.key, ind) : `${ind}`;\n      item = {\n        data: Object.assign({}, node),\n        ind,\n        key,\n        level: parent ? parent.level + 1 : 0,\n        parentKey: parent ? parent.key : null,\n        path: parent ? [...parent.path, key] : [key],\n        valuePath: parent ? [...parent.valuePath, node.value] : [node.value]\n      };\n      callback(item);\n    } // Process children node\n\n\n    if (children) {\n      children.forEach((subNode, subIndex) => {\n        processNode(subNode, subIndex, item);\n      });\n    }\n  };\n\n  processNode(null);\n}\n\nexport function convertDataToEntities(dataNodes) {\n  const keyEntities = {};\n  traverseDataNodes(dataNodes, data => {\n    const {\n      key,\n      parentKey\n    } = data;\n    const entity = Object.assign({}, data);\n    keyEntities[key] = entity; // Fill children\n\n    entity.parent = keyEntities[parentKey];\n\n    if (entity.parent) {\n      entity.parent.children = entity.parent.children || [];\n      entity.parent.children.push(entity);\n    }\n  });\n  return keyEntities;\n}\nexport function findKeysForValues(value, keyEntities) {\n  const valuePath = normalizedArr(value);\n  const res = Object.values(keyEntities).filter(item => _isEqual(item.valuePath, valuePath)).map(item => item.key);\n  return res;\n}\nexport function calcMergeType(autoMergeValue, leafOnly) {\n  let mergeType;\n\n  if (leafOnly) {\n    mergeType = strings.LEAF_ONLY_MERGE_TYPE;\n  } else if (autoMergeValue) {\n    mergeType = strings.AUTO_MERGE_VALUE_MERGE_TYPE;\n  } else {\n    mergeType = strings.NONE_MERGE_TYPE;\n  }\n\n  return mergeType;\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;AAAA,qBAAqB;AACrB,yBAAyB;AACzB,oBAAoB;AAGpB,SAAS,YAAY,OAAO,OAAO;AACjC,SAAO,GAAG,SAAS;AACrB;AAEO,SAAS,QAAQ,KAAK;AAC3B,SAAO,KAAC,cAAAA,SAAQ,GAAG,KAAK,KAAC,mBAAAC,SAAa,GAAG;AAC3C;AACO,SAAS,cAAc,KAAK;AACjC,MAAI,CAAC,MAAM,QAAQ,GAAG,GAAG;AACvB,WAAO,CAAC,GAAG;AAAA,EACb,OAAO;AACL,WAAO;AAAA,EACT;AACF;AAKA,SAAS,kBAAkB,WAAW,UAAU;AAC9C,QAAM,cAAc,CAAC,MAAM,KAAK,WAAW;AACzC,UAAM,WAAW,OAAO,KAAK,WAAW;AACxC,QAAI,OAAO;AAEX,QAAI,MAAM;AACR,YAAM,MAAM,SAAS,YAAY,OAAO,KAAK,GAAG,IAAI,GAAG;AACvD,aAAO;AAAA,QACL,MAAM,OAAO,OAAO,CAAC,GAAG,IAAI;AAAA,QAC5B;AAAA,QACA;AAAA,QACA,OAAO,SAAS,OAAO,QAAQ,IAAI;AAAA,QACnC,WAAW,SAAS,OAAO,MAAM;AAAA,QACjC,MAAM,SAAS,CAAC,GAAG,OAAO,MAAM,GAAG,IAAI,CAAC,GAAG;AAAA,QAC3C,WAAW,SAAS,CAAC,GAAG,OAAO,WAAW,KAAK,KAAK,IAAI,CAAC,KAAK,KAAK;AAAA,MACrE;AACA,eAAS,IAAI;AAAA,IACf;AAGA,QAAI,UAAU;AACZ,eAAS,QAAQ,CAAC,SAAS,aAAa;AACtC,oBAAY,SAAS,UAAU,IAAI;AAAA,MACrC,CAAC;AAAA,IACH;AAAA,EACF;AAEA,cAAY,IAAI;AAClB;AAEO,SAAS,sBAAsB,WAAW;AAC/C,QAAM,cAAc,CAAC;AACrB,oBAAkB,WAAW,UAAQ;AACnC,UAAM;AAAA,MACJ;AAAA,MACA;AAAA,IACF,IAAI;AACJ,UAAM,SAAS,OAAO,OAAO,CAAC,GAAG,IAAI;AACrC,gBAAY,GAAG,IAAI;AAEnB,WAAO,SAAS,YAAY,SAAS;AAErC,QAAI,OAAO,QAAQ;AACjB,aAAO,OAAO,WAAW,OAAO,OAAO,YAAY,CAAC;AACpD,aAAO,OAAO,SAAS,KAAK,MAAM;AAAA,IACpC;AAAA,EACF,CAAC;AACD,SAAO;AACT;AACO,SAAS,kBAAkB,OAAO,aAAa;AACpD,QAAM,YAAY,cAAc,KAAK;AACrC,QAAM,MAAM,OAAO,OAAO,WAAW,EAAE,OAAO,cAAQ,eAAAC,SAAS,KAAK,WAAW,SAAS,CAAC,EAAE,IAAI,UAAQ,KAAK,GAAG;AAC/G,SAAO;AACT;AACO,SAAS,cAAc,gBAAgB,UAAU;AACtD,MAAI;AAEJ,MAAI,UAAU;AACZ,gBAAY,QAAQ;AAAA,EACtB,WAAW,gBAAgB;AACzB,gBAAY,QAAQ;AAAA,EACtB,OAAO;AACL,gBAAY,QAAQ;AAAA,EACtB;AAEA,SAAO;AACT;",
  "names": ["_isNull", "_isUndefined", "_isEqual"]
}
