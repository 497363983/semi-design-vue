{
  "version": 3,
  "sources": ["../../../../node_modules/.pnpm/@douyinfe+semi-foundation@2.34.0/node_modules/@douyinfe/semi-foundation/lib/es/tagInput/foundation.js", "../../../../node_modules/.pnpm/@douyinfe+semi-foundation@2.34.0/node_modules/@douyinfe/semi-foundation/lib/es/tagInput/utils/getSplitedArray.js"],
  "sourcesContent": ["import _isUndefined from \"lodash/isUndefined\";\nimport _isFunction from \"lodash/isFunction\";\nimport _isNumber from \"lodash/isNumber\";\nimport _isString from \"lodash/isString\";\nimport BaseFoundation from '../base/foundation';\nimport keyCode from '../utils/keyCode';\nimport getSplitedArray from './utils/getSplitedArray';\nimport isEnterPress from '../utils/isEnterPress';\nimport arrayMove from '../utils/arrayMove';\n\nclass TagInputFoundation extends BaseFoundation {\n  constructor(adapter) {\n    super(Object.assign({}, adapter));\n    /**\n     * handler of input change\n     */\n\n    this.handleInputChange = e => {\n      const {\n        value\n      } = e.target;\n      const {\n        entering\n      } = this.getStates();\n\n      if (entering) {\n        // 如果处于输入法输入中，则先不检查输入是否有效，直接更新到inputValue，\n        // 因为对于输入法输入中而言，此时更新到 inputValue 的不是最后的结果，比如对于中文，此时 inputValue 中的内容是拼音\n        // 当输入法输入结束后，将在 handleInputCompositionEnd 中判断输入是否有效，处理结果\n        // If it is composition session, it does not check whether the input is valid, and directly updates to inputValue,\n        // Because for composition input, what is updated to inputValue at this time is not the final result.\n        // For example, for Chinese, the content in inputValue is pinyin at this time\n        // When the composition input is finished, it will be judged whether the input is valid in handleInputCompositionEnd and the result will be processed\n        this._onInputChange(value, e);\n      } else {\n        this._checkInputChangeValid(value) && this._onInputChange(value, e);\n      }\n    };\n\n    this.handleInputCompositionStart = e => {\n      this._adapter.setEntering(true);\n    };\n\n    this.handleInputCompositionEnd = e => {\n      this._adapter.setEntering(false);\n\n      const {\n        value\n      } = e.target;\n      const {\n        maxLength,\n        onInputExceed,\n        separator\n      } = this.getProps();\n      let allowChange = true;\n      const {\n        inputValue\n      } = this.getStates();\n\n      if (_isNumber(maxLength)) {\n        const inputArr = getSplitedArray(inputValue, separator);\n        let index = 0;\n\n        for (; index < inputArr.length; index++) {\n          if (inputArr[index].length > maxLength) {\n            allowChange = false;\n            _isFunction(onInputExceed) && onInputExceed(value);\n            break;\n          }\n        }\n\n        if (!allowChange) {\n          const newInputArr = inputArr.slice(0, index);\n\n          if (index < inputArr.length) {\n            newInputArr.push(inputArr[index].slice(0, maxLength));\n          }\n\n          this._adapter.setInputValue(newInputArr.join(separator));\n        }\n      }\n    };\n    /**\n     * check whether the input change is legal\n     */\n\n\n    this._checkInputChangeValid = value => {\n      // e.target.value legitimacy judgment needs to be based on this.state.input Value\n      const {\n        maxLength,\n        onInputExceed,\n        separator\n      } = this._adapter.getProps();\n\n      const {\n        inputValue\n      } = this._adapter.getStates();\n\n      let allowChange = true;\n\n      if (_isNumber(maxLength)) {\n        const valueArr = getSplitedArray(value, separator);\n        const inputArr = getSplitedArray(inputValue, separator);\n        const maxLen = Math.max(valueArr.length, inputArr.length);\n\n        for (let i = 0; i < maxLen; i++) {\n          // When the input length is increasing\n          // eslint-disable-next-line max-len\n          if (!_isUndefined(valueArr[i]) && (_isUndefined(inputArr[i]) || valueArr[i].length > inputArr[i].length)) {\n            // When the input length exceeds maxLength\n            // eslint-disable-next-line max-depth\n            if (valueArr[i].length > maxLength) {\n              allowChange = false;\n              _isFunction(onInputExceed) && onInputExceed(value);\n              break;\n            }\n          }\n        }\n      }\n\n      return allowChange;\n    };\n    /**\n     * Input event handler when onKeyDown is triggered\n     */\n\n\n    this.handleKeyDown = e => {\n      const {\n        inputValue,\n        tagsArray\n      } = this._adapter.getStates();\n\n      const code = e.keyCode;\n\n      if (code === keyCode.ENTER) {\n        e.preventDefault(); // prevent trigger submit when using in form\n\n        if (inputValue !== '') {\n          this._handleAddTags(e);\n        }\n      }\n\n      const {\n        length\n      } = tagsArray;\n\n      if (code === keyCode.BACKSPACE && inputValue === '' && length > 0) {\n        const newTagList = tagsArray.slice(0, length - 1);\n        const removedTag = tagsArray[length - 1];\n\n        this._onRemove(newTagList, removedTag, length - 1);\n      }\n\n      this._adapter.notifyKeyDown(e);\n    };\n  }\n\n  _handleAddTags(e) {\n    const {\n      separator,\n      max,\n      onExceed,\n      allowDuplicates\n    } = this._adapter.getProps();\n\n    const {\n      inputValue,\n      tagsArray\n    } = this._adapter.getStates();\n\n    let addTags = getSplitedArray(inputValue, separator);\n    addTags = addTags.filter((item, idx) => {\n      // If allowDuplicates is false, then filter duplicates\n      if (!allowDuplicates) {\n        if (tagsArray.includes(item) || addTags.indexOf(item) !== idx) {\n          return false;\n        }\n      } // Filter empty strings and pure space strings in new items\n\n\n      return _isString(item) && item.trim() !== '';\n    });\n    let newTagList = tagsArray.concat(addTags);\n\n    if (_isNumber(max) && newTagList.length > max) {\n      _isFunction(onExceed) && onExceed(newTagList);\n      newTagList = newTagList.slice(0, max);\n      addTags = addTags.slice(0, max - tagsArray.length);\n    }\n\n    if (addTags.length > 0) {\n      this._onAdd(newTagList, addTags);\n    }\n\n    this._onInputChange('', e);\n  }\n\n  handleInputBlur(e) {\n    const {\n      addOnBlur\n    } = this._adapter.getProps();\n\n    if (addOnBlur === true) {\n      this._handleAddTags(e);\n    }\n\n    this._adapter.setFocusing(false);\n\n    this._adapter.notifyBlur(e);\n  }\n\n  handleInputFocus(e) {\n    this._adapter.setFocusing(true);\n\n    this._adapter.notifyFocus(e);\n  }\n  /**\n   * A11y: simulate clear button click\n   */\n\n  /* istanbul ignore next */\n\n\n  handleClearEnterPress(e) {\n    if (isEnterPress(e)) {\n      this.handleClearBtn(e);\n    }\n  }\n\n  handleClearBtn(e) {\n    const {\n      inputValue,\n      tagsArray\n    } = this._adapter.getStates();\n\n    if (tagsArray.length > 0) {\n      this._adapter.setTagsArray([]);\n\n      this._adapter.notifyTagChange([]);\n    }\n\n    if (inputValue.length > 0) {\n      this._onInputChange('', e);\n    } // Prevent event propagate to TagInput outermost div\n\n\n    e.stopPropagation();\n  }\n\n  handleTagClose(index) {\n    const {\n      tagsArray\n    } = this._adapter.getStates();\n\n    const newTagList = [...tagsArray];\n    newTagList.splice(index, 1);\n    const removedTag = tagsArray[index];\n\n    this._onRemove(newTagList, removedTag, index);\n  }\n\n  handleInputMouseEnter() {\n    this._adapter.setHovering(true);\n  }\n\n  handleInputMouseLeave() {\n    this._adapter.setHovering(false);\n  }\n\n  handleClick(e) {\n    const {\n      disabled\n    } = this.getProps();\n\n    if (disabled) {\n      return;\n    }\n\n    const clickOutsideHandler = this._adapter.getClickOutsideHandler();\n\n    if (!clickOutsideHandler) {\n      this._adapter.setActive(true);\n\n      this._adapter.registerClickOutsideHandler(e => this.clickOutsideCallBack());\n    }\n  }\n\n  clickOutsideCallBack() {\n    this._adapter.unregisterClickOutsideHandler();\n\n    this._adapter.setActive(false);\n  }\n\n  handleClickPrefixOrSuffix(e) {\n    const {\n      disabled\n    } = this._adapter.getProps();\n\n    const {\n      isFocus\n    } = this._adapter.getStates();\n\n    if (!disabled && !isFocus) {\n      this._adapter.toggleFocusing(true);\n    }\n  }\n\n  handlePreventMouseDown(e) {\n    if (e && _isFunction(e.preventDefault)) {\n      e.preventDefault();\n    }\n  }\n  /**\n   * handler of delete tag\n   */\n\n\n  _onRemove(newTagList, removedTags, index) {\n    if (!this._isControlledComponent()) {\n      this._adapter.setTagsArray(newTagList);\n    }\n\n    this._adapter.notifyTagChange(newTagList);\n\n    this._adapter.notifyTagRemove(removedTags, index);\n  }\n  /**\n   * handler of add tag\n   */\n\n\n  _onAdd(newTagList, addTags) {\n    if (!this._isControlledComponent()) {\n      this._adapter.setTagsArray(newTagList);\n    }\n\n    this._adapter.notifyTagChange(newTagList);\n\n    this._adapter.notifyTagAdd(addTags);\n  }\n  /**\n   * handler of input change\n   */\n\n\n  _onInputChange(value, e) {\n    this._adapter.setInputValue(value);\n\n    this._adapter.notifyInputChange(value, e);\n  }\n\n  handleSortEnd(callbackProps) {\n    const {\n      oldIndex,\n      newIndex\n    } = callbackProps;\n    const {\n      tagsArray\n    } = this.getStates();\n    const newTagsArray = arrayMove(tagsArray, oldIndex, newIndex);\n\n    if (!this._isControlledComponent()) {\n      this._adapter.setTagsArray(newTagsArray);\n    }\n\n    this._adapter.notifyTagChange(newTagsArray);\n  }\n\n}\n\nexport default TagInputFoundation;", "import _isNumber from \"lodash/isNumber\";\nimport _isArray from \"lodash/isArray\";\nimport _isString from \"lodash/isString\";\n\n/**\n * Get the splited array.\n * We expect separators to be string | string[] | null, but users\n * are also allowed to pass in other types.\n */\nconst getSplitedArray = (originString, separators) => {\n  let splitedValue = [];\n\n  if (_isString(separators) || _isNumber(separators)) {\n    splitedValue = originString.split(separators);\n  } else if (_isArray(separators)) {\n    const tempChar = separators[0]; // temporary splitter\n\n    splitedValue = originString;\n\n    for (let i = 1; i < separators.length; i++) {\n      splitedValue = splitedValue.split(separators[i]).join(tempChar);\n    }\n\n    splitedValue = splitedValue.split(tempChar);\n  } else {\n    splitedValue.push(originString);\n  }\n\n  return splitedValue;\n};\n\nexport default getSplitedArray;"],
  "mappings": "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",
  "names": ["import_isNumber", "import_isString", "_isString", "_isNumber", "_isArray", "_isNumber", "_isFunction", "_isUndefined", "_isString", "e", "foundation_default"]
}
