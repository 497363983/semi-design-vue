{
  "version": 3,
  "sources": ["../../../../node_modules/.pnpm/@douyinfe+semi-foundation@2.34.0/node_modules/@douyinfe/semi-foundation/lib/es/datePicker/_utils/getInsetInputFormatToken.js", "../../../../node_modules/.pnpm/@douyinfe+semi-foundation@2.34.0/node_modules/@douyinfe/semi-foundation/lib/es/datePicker/_utils/getInsetInputValueFromInsetInputStr.js"],
  "sourcesContent": ["import { getDefaultFormatTokenByType } from './getDefaultFormatToken';\n/**\n * 获取 insetInput 输入框的 placeholder\n * Get the placeholder of the insetInput input\n *\n * If type is time related, we only recognize the format like `dateFormat timeFormat`\n *  - 'yyyy-MM-dd HH:mm:ss' // ok\n *  - 'yyyy-MM-dd  HH:mm:ss' // bad format\n *\n * @example\n * 'yyyy-MM-dd' => 'yyyy-MM-dd'\n * 'yyyy-MM' => 'yyyy-MM'\n * 'yyyy-MM-dd HH:mm:ss' => 'yyyy-MM-dd HH:mm:ss'\n * 'yyyy-MM-dd HH:mm' => 'yyyy-MM-dd HH:mm'\n * 'Pp' => 'yyyy-MM-dd'\n */\n\nexport default function getInsetInputFormatToken(options) {\n  const {\n    format,\n    type\n  } = options;\n  const dateReg = /([yMd]{0,4}[^a-z\\s]*[yMd]{0,4}[^a-z\\s]*[yMd]{0,4})/i;\n  const dateTimeReg = /([yMd]{0,4}[^a-z\\s]*[yMd]{0,4}[^a-z\\s]*[yMd]{0,4}) (H{0,2}[^a-z\\s]*m{0,2}[^a-z\\s]*s{0,2})/i;\n  const defaultToken = getDefaultFormatTokenByType(type);\n  let insetInputFormat;\n\n  switch (type) {\n    case 'dateTime':\n    case 'dateTimeRange':\n      const dateTimeResult = dateTimeReg.exec(format);\n      insetInputFormat = dateTimeResult && dateTimeResult[1] && dateTimeResult[2] ? `${dateTimeResult[1]} ${dateTimeResult[2]}` : defaultToken;\n      break;\n\n    case 'date':\n    case 'month':\n    case 'monthRange':\n    case 'dateRange':\n    default:\n      const dateResult = dateReg.exec(format);\n      insetInputFormat = dateResult && dateResult[1] || defaultToken;\n      break;\n  }\n\n  return insetInputFormat;\n}", "/**\n * 从 insetInputStr 字符串解析出 insetInputValue 对象\n * Parse the insetInputValue object from the insetInputStr string\n *\n * @example\n * ```\n * '2022-02-01' => { monthLeft: { dateInput: '2022-02-01' } }\n * '2022-02-01 00:00:00' => { monthLeft: { dateInput: '2022-02-01', timeInput: '00:00:00' } }\n * '2022-02-01 00:00:00 ~ 2022-02-15 00:00:00' => { monthLeft: { dateInput: '2022-02-01', timeInput: '00:00:00'}, monthRight: { dateInput: '2022-02-15', timeInput: '00:00:00' } }\n *\n * '2022-0' => { monthLeft: { dateInput: '2022-0' } }\n * '2022-02-01 00:00:' => { monthLeft: { dateInput: '2022-02-01', timeInput: '00:00:' } }\n * '2022-02-01 00:00:00 ~ ' => { monthLeft: { dateInput: '2022-02-01', timeInput: '00:00:00'}, monthRight: { dateInput: '', timeInput: '' } }\n * ' ~ 2022-02-15 00:00:00' => { monthLeft: { dateInput: '', timeInput: '' }, monthRight: { dateInput: '2022-02-15', timeInput: '00:00:00' } }\n * ```\n */\nexport default function getInsetInputValueFromInsetInputStr(options) {\n  const timeSeparator = ' ';\n  const {\n    inputValue = '',\n    rangeSeparator,\n    type\n  } = options;\n  let leftDateInput, leftTimeInput, rightDateInput, rightTimeInput;\n  const insetInputValue = {\n    monthLeft: {\n      dateInput: '',\n      timeInput: ''\n    },\n    monthRight: {\n      dateInput: '',\n      timeInput: ''\n    }\n  };\n\n  switch (type) {\n    case 'date':\n    case 'month':\n    case 'monthRange':\n      insetInputValue.monthLeft.dateInput = inputValue;\n      break;\n\n    case 'dateRange':\n      [leftDateInput = '', rightDateInput = ''] = inputValue.split(rangeSeparator);\n      insetInputValue.monthLeft.dateInput = leftDateInput;\n      insetInputValue.monthRight.dateInput = rightDateInput;\n      break;\n\n    case 'dateTime':\n      [leftDateInput = '', leftTimeInput = ''] = inputValue.split(timeSeparator);\n      insetInputValue.monthLeft.dateInput = leftDateInput;\n      insetInputValue.monthLeft.timeInput = leftTimeInput;\n      break;\n\n    case 'dateTimeRange':\n      const [leftInput = '', rightInput = ''] = inputValue.split(rangeSeparator);\n      [leftDateInput = '', leftTimeInput = ''] = leftInput.split(timeSeparator);\n      [rightDateInput = '', rightTimeInput = ''] = rightInput.split(timeSeparator);\n      insetInputValue.monthLeft.dateInput = leftDateInput;\n      insetInputValue.monthLeft.timeInput = leftTimeInput;\n      insetInputValue.monthRight.dateInput = rightDateInput;\n      insetInputValue.monthRight.timeInput = rightTimeInput;\n      break;\n  }\n\n  return insetInputValue;\n}"],
  "mappings": ";;;;;AAiBe,SAAR,yBAA0C,SAAS;AACxD,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,EACF,IAAI;AACJ,QAAM,UAAU;AAChB,QAAM,cAAc;AACpB,QAAM,eAAe,4BAA4B,IAAI;AACrD,MAAI;AAEJ,UAAQ,MAAM;AAAA,IACZ,KAAK;AAAA,IACL,KAAK;AACH,YAAM,iBAAiB,YAAY,KAAK,MAAM;AAC9C,yBAAmB,kBAAkB,eAAe,CAAC,KAAK,eAAe,CAAC,IAAI,GAAG,eAAe,CAAC,KAAK,eAAe,CAAC,MAAM;AAC5H;AAAA,IAEF,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL;AACE,YAAM,aAAa,QAAQ,KAAK,MAAM;AACtC,yBAAmB,cAAc,WAAW,CAAC,KAAK;AAClD;AAAA,EACJ;AAEA,SAAO;AACT;;;AC7Be,SAAR,oCAAqD,SAAS;AACnE,QAAM,gBAAgB;AACtB,QAAM;AAAA,IACJ,aAAa;AAAA,IACb;AAAA,IACA;AAAA,EACF,IAAI;AACJ,MAAI,eAAe,eAAe,gBAAgB;AAClD,QAAM,kBAAkB;AAAA,IACtB,WAAW;AAAA,MACT,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,YAAY;AAAA,MACV,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAEA,UAAQ,MAAM;AAAA,IACZ,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AACH,sBAAgB,UAAU,YAAY;AACtC;AAAA,IAEF,KAAK;AACH,OAAC,gBAAgB,IAAI,iBAAiB,EAAE,IAAI,WAAW,MAAM,cAAc;AAC3E,sBAAgB,UAAU,YAAY;AACtC,sBAAgB,WAAW,YAAY;AACvC;AAAA,IAEF,KAAK;AACH,OAAC,gBAAgB,IAAI,gBAAgB,EAAE,IAAI,WAAW,MAAM,aAAa;AACzE,sBAAgB,UAAU,YAAY;AACtC,sBAAgB,UAAU,YAAY;AACtC;AAAA,IAEF,KAAK;AACH,YAAM,CAAC,YAAY,IAAI,aAAa,EAAE,IAAI,WAAW,MAAM,cAAc;AACzE,OAAC,gBAAgB,IAAI,gBAAgB,EAAE,IAAI,UAAU,MAAM,aAAa;AACxE,OAAC,iBAAiB,IAAI,iBAAiB,EAAE,IAAI,WAAW,MAAM,aAAa;AAC3E,sBAAgB,UAAU,YAAY;AACtC,sBAAgB,UAAU,YAAY;AACtC,sBAAgB,WAAW,YAAY;AACvC,sBAAgB,WAAW,YAAY;AACvC;AAAA,EACJ;AAEA,SAAO;AACT;",
  "names": []
}
