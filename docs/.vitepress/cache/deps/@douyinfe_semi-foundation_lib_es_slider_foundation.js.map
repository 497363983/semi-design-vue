{
  "version": 3,
  "sources": ["../../../../node_modules/.pnpm/@douyinfe+semi-foundation@2.34.0/node_modules/@douyinfe/semi-foundation/lib/es/utils/touchPolyfill.js", "../../../../node_modules/.pnpm/@douyinfe+semi-foundation@2.34.0/node_modules/@douyinfe/semi-foundation/lib/es/slider/foundation.js"],
  "sourcesContent": ["import warning from './warning';\n\nconst touchEventPolyfill = (touch, touchEvent) => {\n  /* Touch is the first point of multi-touch. In order to minimize the change of slider code to support touch,\n  some methods that will be used on touchEvent are mounted on the multi-touch Touch object.*/\n  // polyfill for firefox\n  if (!globalThis.Touch || !(touch instanceof Touch)) {\n    return touch;\n  }\n\n  const keysNeedPolyfill = ['stopPropagation', 'preventDefault'];\n  keysNeedPolyfill.forEach(key => {\n    let value = touchEvent[key];\n\n    if (value) {\n      if (typeof value === 'function') {\n        // bind 'this' for function of touchEvent running in Touch Point Object\n        value = function () {\n          return touchEvent[key](...arguments);\n        };\n      }\n\n      if (touch[key]) {\n        warning(true, `\"The key ${key}\" exist in Touch.`);\n      } else {\n        touch[key] = value;\n      }\n    }\n  });\n  return touch;\n};\n\nexport default touchEventPolyfill;", "/* eslint-disable no-param-reassign */\n\n/* eslint-disable max-len */\n\n/* eslint-disable no-nested-ternary */\nimport BaseFoundation from '../base/foundation';\nimport touchEventPolyfill from '../utils/touchPolyfill';\nimport warning from '../utils/warning';\nimport { handlePrevent } from '../utils/a11y';\nexport default class SliderFoundation extends BaseFoundation {\n  constructor(adapter) {\n    var _this;\n\n    super(Object.assign(Object.assign({}, SliderFoundation.defaultAdapter), adapter));\n    _this = this;\n\n    /**\n     * Calculate the percentage corresponding to the current value for style calculation\n     * @{}\n     *\n     * @memberof SliderFoundation\n     */\n    this.getMinAndMaxPercent = value => {\n      // debugger\n      const {\n        range,\n        min,\n        max\n      } = this._adapter.getProps();\n\n      const minPercent = range ? (value[0] - min) / (max - min) : (value - min) / (max - min);\n      const maxPercent = range ? (value[1] - min) / (max - min) : 1;\n      return {\n        min: this._checkValidity(minPercent),\n        max: this._checkValidity(maxPercent)\n      };\n    };\n    /**\n     * Check if value is out of range\n     * @memberof SliderFoundation\n     */\n\n\n    this._checkValidity = function (value) {\n      let min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      let max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      const checked = value > max ? max : value < min ? min : value;\n      return checked;\n    };\n    /**\n     * When render handle, the display and content of the tooltip are calculated according to the conditions\n     * @visible:  props passed in by the component\n     * @formatter: tooltip content formatting function\n     * @memberof SliderFoundation\n     */\n\n\n    this.computeHandleVisibleVal = (visible, formatter, range) => {\n      // debugger;\n      const {\n        focusPos,\n        currentValue\n      } = this._adapter.getStates();\n\n      const tipVisible = {\n        min: false,\n        max: false\n      };\n      let tipChildren;\n\n      if (formatter) {\n        tipChildren = {\n          min: range ? formatter(this.outPutValue(currentValue[0])) : formatter(this.outPutValue(currentValue)),\n          max: range ? formatter(this.outPutValue(currentValue[1])) : null\n        };\n      } else {\n        tipChildren = {\n          min: range ? this.outPutValue(currentValue[0]) : this.outPutValue(currentValue),\n          max: range ? this.outPutValue(currentValue[1]) : null\n        };\n      }\n\n      if (visible) {\n        tipVisible.min = true;\n        tipVisible.max = true;\n      } else if (typeof visible === 'undefined' && formatter) {\n        if (focusPos === 'min') {\n          tipVisible.min = true;\n        } else if (focusPos === 'max') {\n          tipVisible.max = true;\n        }\n      }\n\n      const result = {\n        tipVisible,\n        tipChildren\n      };\n      return result;\n    };\n    /**\n     * Calculate whether the value passed in is valid\n     *\n     * @memberof SliderFoundation\n     */\n\n\n    this.valueFormatIsCorrect = value => {\n      if (Array.isArray(value)) {\n        return typeof value[0] === 'number' && typeof value[0] === 'number';\n      } else {\n        return typeof value === 'number';\n      }\n    };\n    /**\n     * Fix the mouse position to position the parent container relative to the position\n     *\n     * @memberof SliderFoundation\n     */\n\n\n    this.handleMousePos = (pageX, pageY) => {\n      const parentRect = this._adapter.getParentRect();\n\n      const scrollParent = this._adapter.getScrollParentVal();\n\n      const parentX = parentRect ? parentRect.left : 0;\n      const parentY = parentRect ? parentRect.top : 0;\n      return {\n        x: pageX - parentX + scrollParent.scrollLeft,\n        y: pageY - parentY + scrollParent.scrollTop\n      };\n    };\n    /**\n     * Provides the nearest scrollable parent node of the current node, which is used to calculate the scrollTop and scrollLeft attributes\n     *\n     * @memberof SliderFoundation\n     */\n\n\n    this.getScrollParent = element => {\n      // TODO: move window document out of foundation.\n      const el = element;\n      const regex = /(auto|scroll)/;\n\n      const style = (node, prop) => window.getComputedStyle(node, null).getPropertyValue(prop);\n\n      const scroll = node => regex.test(style(node, 'overflow') + style(node, 'overflow-y') + style(node, 'overflow-x'));\n\n      const scrollParent = node => !node || node === document.body || !(node instanceof Element) ? document.body : scroll(node) ? node : scrollParent(node.parentNode);\n\n      return scrollParent(el);\n    };\n    /**\n     * Fixed the event location, beyond the maximum, minimum, left and right, etc. directly modified to the effective location\n     *\n     * @memberof SliderFoundation\n     */\n\n\n    this.checkMeetMinMax = position => {\n      // Returns the length of the distance to the left\n      const {\n        vertical,\n        verticalReverse,\n        range\n      } = this._adapter.getProps();\n\n      const value = this._adapter.getState('currentValue');\n\n      const currentPos = this.transValueToPos(value);\n\n      const {\n        sliderX,\n        sliderY,\n        sliderWidth,\n        sliderHeight\n      } = this._adapter.getSliderLengths();\n\n      const {\n        chooseMovePos,\n        isDrag\n      } = this._adapter.getStates();\n\n      const len = vertical ? sliderHeight : sliderWidth;\n      let startPos;\n\n      if (vertical && verticalReverse) {\n        startPos = sliderY + len;\n      } else {\n        startPos = vertical ? sliderY : sliderX;\n      }\n\n      startPos = chooseMovePos === 'max' && isDrag ? currentPos[0] : startPos; // eslint-disable-next-line one-var\n\n      let endPos;\n\n      if (vertical && verticalReverse) {\n        endPos = sliderY;\n      } else {\n        endPos = vertical ? sliderY + sliderHeight : sliderX + sliderWidth;\n      }\n\n      endPos = chooseMovePos === 'min' && isDrag && range ? currentPos[1] : endPos;\n\n      if (vertical && verticalReverse) {\n        if (position >= startPos) {\n          position = startPos;\n        } else if (position <= endPos) {\n          position = endPos;\n        }\n      } else {\n        if (position <= startPos) {\n          position = startPos;\n        } else if (position >= endPos) {\n          position = endPos;\n        }\n      }\n\n      return position;\n    };\n    /**\n     * Converting location information to value requires processing if step is not 1 (invalid move returns false)\n     *\n     * @memberof SliderFoundation\n     */\n\n\n    this.transPosToValue = (mousePos, isMin) => {\n      const pos = this.checkMeetMinMax(mousePos);\n\n      const {\n        min,\n        max,\n        currentValue\n      } = this._adapter.getStates();\n\n      const {\n        range,\n        vertical,\n        step,\n        verticalReverse\n      } = this._adapter.getProps();\n\n      const {\n        sliderX,\n        sliderY,\n        sliderWidth,\n        sliderHeight\n      } = this._adapter.getSliderLengths();\n\n      const startPos = vertical ? sliderY : sliderX;\n      const len = vertical ? sliderHeight : sliderWidth;\n      let stepValue;\n\n      if (vertical && verticalReverse) {\n        isMin = !isMin;\n        stepValue = (startPos + len - pos) / len * (max - min) + min;\n      } else {\n        stepValue = (pos - startPos) / len * (max - min) + min;\n      } // debugger\n      // eslint-disable-next-line one-var\n\n\n      let compareValue;\n\n      if (range) {\n        compareValue = isMin ? currentValue[0] : currentValue[1];\n      } else {\n        compareValue = currentValue;\n      }\n\n      if (step !== 1) {\n        // Find nearest step point\n        stepValue = Math.round(stepValue / step) * step;\n      }\n\n      if (range && stepValue !== compareValue) {\n        if (vertical && verticalReverse) {\n          return isMin ? [currentValue[0], stepValue] : [stepValue, currentValue[1]];\n        } else {\n          return isMin ? [stepValue, currentValue[1]] : [currentValue[0], stepValue];\n        }\n      } else if (!range && stepValue !== compareValue) {\n        return stepValue;\n      } else {\n        return false;\n      }\n    };\n    /**\n     * Convert value values into location information\n     *\n     * @memberof SliderFoundation\n     */\n\n\n    this.transValueToPos = value => {\n      const {\n        min,\n        max\n      } = this._adapter.getStates();\n\n      const {\n        vertical,\n        range,\n        verticalReverse\n      } = this._adapter.getProps();\n\n      const {\n        sliderX,\n        sliderY,\n        sliderWidth,\n        sliderHeight\n      } = this._adapter.getSliderLengths();\n\n      const startPos = vertical ? sliderY : sliderX;\n      const len = vertical ? sliderHeight : sliderWidth;\n\n      if (range) {\n        if (vertical && verticalReverse) {\n          return [startPos + len - (value[0] - min) * len / (max - min), startPos + len - (value[1] - min) * len / (max - min)];\n        } else {\n          return [(value[0] - min) * len / (max - min) + startPos, (value[1] - min) * len / (max - min) + startPos];\n        }\n      } else {\n        return (value - min) * len / (max - min) + startPos;\n      }\n    };\n    /**\n     * Determine whether the mark should be highlighted: valid interval and include = false\n     *\n     * @memberof SliderFoundation\n     */\n\n\n    this.isMarkActive = mark => {\n      const {\n        min,\n        max,\n        range,\n        included\n      } = this._adapter.getProps();\n\n      const currentValue = this._adapter.getState('currentValue');\n\n      if (typeof (mark / 1) === 'number' && mark >= min && mark <= max) {\n        if (range) {\n          return (mark > currentValue[1] || mark < currentValue[0]) && included ? 'unActive' : 'active';\n        } else {\n          return mark <= currentValue && included ? 'active' : 'unActive';\n        }\n      } else {\n        return false;\n      }\n    };\n    /**\n     * onchange output conversion, default rounding without decimal, step less than 1 has decimal\n     *\n     * @memberof SliderFoundation\n     */\n\n\n    this.outPutValue = inputValue => {\n      const checkHowManyDecimals = num => {\n        var _a, _b;\n\n        const reg = /^\\d+(\\.\\d+)?$/;\n\n        if (reg.test(String(num))) {\n          return (_b = (_a = num.toString().split('.')[1]) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0;\n        }\n\n        return 0;\n      };\n\n      const step = this._adapter.getProp('step');\n\n      const transWay = (() => {\n        const decimals = checkHowManyDecimals(step);\n        const multipler = Math.pow(10, decimals);\n        return value => {\n          return Math.round(value * multipler) / multipler;\n        };\n      })();\n\n      if (Array.isArray(inputValue)) {\n        return [transWay(inputValue[0]), transWay(inputValue[1])];\n      } else {\n        return transWay(inputValue);\n      }\n    };\n\n    this.handleDisabledChange = disabled => {\n      this._adapter.updateDisabled(disabled);\n    };\n\n    this.checkAndUpdateIsInRenderTreeState = () => this._adapter.checkAndUpdateIsInRenderTreeState();\n\n    this.calculateOutputValue = (position, isMin) => {\n      const moveValue = this.transPosToValue(position, isMin);\n\n      if (moveValue === false) {\n        return undefined;\n      }\n\n      return this.outPutValue(moveValue);\n    };\n    /**\n     *\n     *\n     * @memberof SliderFoundation\n     */\n\n\n    this.handleValueChange = (prevValue, nextValue) => {\n      const {\n        min,\n        max\n      } = this._adapter.getStates();\n\n      let resultState = null;\n      const disableState = {};\n\n      if (this.valueFormatIsCorrect(nextValue)) {\n        if (Array.isArray(prevValue) && Array.isArray(nextValue)) {\n          nextValue = [nextValue[0] < min ? min : nextValue[0], nextValue[1] > max ? max : nextValue[1] // Math.round(nextValue[1])\n          ]; // this._adapter.notifyChange(this.outPutValue(nextValue));\n\n          resultState = Object.assign(disableState, {\n            currentValue: nextValue\n          });\n        }\n\n        if (typeof prevValue === 'number' && typeof nextValue === 'number') {\n          if (nextValue > max) {\n            nextValue = max;\n          } else {\n            nextValue = nextValue < min ? min : nextValue; // Math.round(nextValue);\n          } // this._adapter.notifyChange(this.outPutValue(nextValue));\n\n\n          resultState = Object.assign(disableState, {\n            currentValue: nextValue\n          });\n        }\n      } else {\n        resultState = disableState;\n      }\n\n      if (resultState) {\n        this._adapter.transNewPropsToState(resultState);\n      }\n    };\n\n    this.onHandleDown = (e, handler) => {\n      this._adapter.onHandleDown(e);\n\n      const disabled = this._adapter.getState('disabled');\n\n      const {\n        vertical\n      } = this._adapter.getProps();\n\n      const {\n        dragging\n      } = this._adapter.getOverallVars();\n\n      if (disabled) {\n        return false;\n      }\n\n      this._adapter.setStateVal('isDrag', true);\n\n      this._adapter.setStateVal('chooseMovePos', handler);\n\n      if (handler === 'min') {\n        this._adapter.setDragging([true, dragging[1]]);\n      } else {\n        this._adapter.setDragging([dragging[0], true]);\n      }\n\n      const mousePos = this.handleMousePos(e.pageX, e.pageY);\n      let pos = vertical ? mousePos.y : mousePos.x;\n\n      if (!this._adapter.isEventFromHandle(e)) {\n        this._dragOffset = 0;\n      } else {\n        const handlePosition = this._getHandleCenterPosition(vertical, e.target);\n\n        this._dragOffset = vertical ? pos - handlePosition : pos - handlePosition;\n        pos = handlePosition;\n      }\n\n      return true;\n    };\n\n    this.onHandleMove = e => {\n      this._adapter.setEventDefault(e);\n\n      const {\n        disabled,\n        chooseMovePos\n      } = this._adapter.getStates();\n\n      const {\n        vertical\n      } = this._adapter.getProps();\n\n      const {\n        dragging\n      } = this._adapter.getOverallVars();\n\n      if (disabled) {\n        return false;\n      }\n\n      this.onHandleEnter(chooseMovePos);\n      const mousePos = this.handleMousePos(e.pageX, e.pageY);\n      let pagePos = vertical ? mousePos.y : mousePos.x;\n      pagePos = pagePos - this._dragOffset;\n\n      if (chooseMovePos === 'min' && dragging[0] || chooseMovePos === 'max' && dragging[1]) {\n        const outPutValue = this.calculateOutputValue(pagePos, chooseMovePos === 'min');\n\n        if (outPutValue === undefined) {\n          return false;\n        }\n\n        this._adapter.notifyChange(outPutValue); // allow drag for controlled component, so no _isControlledComponent check\n\n\n        this._adapter.onHandleMove(pagePos, chooseMovePos === 'min', undefined, false, outPutValue);\n      }\n\n      return true;\n    }; // run when user touch left or right handle.\n\n\n    this.onHandleTouchStart = (e, handler) => {\n      const handleMinDom = this._adapter.getMinHandleEl();\n\n      const handleMaxDom = this._adapter.getMaxHandleEl();\n\n      if (e.target === handleMinDom || e.target === handleMaxDom) {\n        handlePrevent(e);\n        const touch = touchEventPolyfill(e.touches[0], e);\n        this.onHandleDown(touch, handler);\n      }\n    };\n\n    this.onHandleTouchMove = e => {\n      const handleMinDom = this._adapter.getMinHandleEl();\n\n      const handleMaxDom = this._adapter.getMaxHandleEl();\n\n      if (e.target === handleMinDom || e.target === handleMaxDom) {\n        const touch = touchEventPolyfill(e.touches[0], e);\n        this.onHandleMove(touch);\n      }\n    };\n\n    this.onHandleEnter = pos => {\n      // debugger;\n      // this._adapter.setEventDefault(e);\n      const {\n        disabled,\n        focusPos\n      } = this._adapter.getStates();\n\n      if (!disabled) {\n        if (!focusPos && pos !== focusPos) {\n          this._adapter.onHandleEnter(pos);\n        }\n      }\n    };\n\n    this.onHandleLeave = () => {\n      // this._adapter.setEventDefault(e);\n      const disabled = this._adapter.getState('disabled');\n\n      if (!disabled) {\n        this._adapter.onHandleLeave();\n      }\n    };\n\n    this.onHandleUp = e => {\n      this._adapter.onHandleUpBefore(e); // const value = this._adapter.getProp('value');\n\n\n      const {\n        disabled,\n        chooseMovePos\n      } = this._adapter.getStates();\n\n      const {\n        dragging\n      } = this._adapter.getOverallVars();\n\n      if (disabled) {\n        return false;\n      }\n\n      if (chooseMovePos === 'min') {\n        this._adapter.setDragging([false, dragging[1]]);\n      } else {\n        this._adapter.setDragging([dragging[0], false]);\n      }\n\n      this._adapter.setStateVal('isDrag', false);\n\n      this._adapter.onHandleLeave();\n\n      this._adapter.onHandleUpAfter();\n\n      return true;\n    };\n\n    this._handleValueDecreaseWithKeyBoard = (step, handler) => {\n      const {\n        min,\n        currentValue\n      } = this.getStates();\n      const {\n        range\n      } = this.getProps();\n\n      if (handler === 'min') {\n        if (range) {\n          let newMinValue = currentValue[0] - step;\n          newMinValue = newMinValue < min ? min : newMinValue;\n          return [newMinValue, currentValue[1]];\n        } else {\n          let newMinValue = currentValue - step;\n          newMinValue = newMinValue < min ? min : newMinValue;\n          return newMinValue;\n        }\n      } else {\n        let newMaxValue = currentValue[1] - step;\n        newMaxValue = newMaxValue < currentValue[0] ? currentValue[0] : newMaxValue;\n        return [currentValue[0], newMaxValue];\n      }\n    };\n\n    this._handleValueIncreaseWithKeyBoard = (step, handler) => {\n      const {\n        max,\n        currentValue\n      } = this.getStates();\n      const {\n        range\n      } = this.getProps();\n\n      if (handler === 'min') {\n        if (range) {\n          let newMinValue = currentValue[0] + step;\n          newMinValue = newMinValue > currentValue[1] ? currentValue[1] : newMinValue;\n          return [newMinValue, currentValue[1]];\n        } else {\n          let newMinValue = currentValue + step;\n          newMinValue = newMinValue > max ? max : newMinValue;\n          return newMinValue;\n        }\n      } else {\n        let newMaxValue = currentValue[1] + step;\n        newMaxValue = newMaxValue > max ? max : newMaxValue;\n        return [currentValue[0], newMaxValue];\n      }\n    };\n\n    this._handleHomeKey = handler => {\n      const {\n        min,\n        currentValue\n      } = this.getStates();\n      const {\n        range\n      } = this.getProps();\n\n      if (handler === 'min') {\n        if (range) {\n          return [min, currentValue[1]];\n        } else {\n          return min;\n        }\n      } else {\n        return [currentValue[0], currentValue[0]];\n      }\n    };\n\n    this._handleEndKey = handler => {\n      const {\n        max,\n        currentValue\n      } = this.getStates();\n      const {\n        range\n      } = this.getProps();\n\n      if (handler === 'min') {\n        if (range) {\n          return [currentValue[1], currentValue[1]];\n        } else {\n          return max;\n        }\n      } else {\n        return [currentValue[0], max];\n      }\n    };\n\n    this.handleKeyDown = (event, handler) => {\n      const {\n        min,\n        max,\n        currentValue\n      } = this.getStates();\n      const {\n        step,\n        range\n      } = this.getProps();\n      let outputValue;\n\n      switch (event.key) {\n        case \"ArrowLeft\":\n        case \"ArrowDown\":\n          outputValue = this._handleValueDecreaseWithKeyBoard(step, handler);\n          break;\n\n        case \"ArrowRight\":\n        case \"ArrowUp\":\n          outputValue = this._handleValueIncreaseWithKeyBoard(step, handler);\n          break;\n\n        case \"PageUp\":\n          outputValue = this._handleValueIncreaseWithKeyBoard(10 * step, handler);\n          break;\n\n        case \"PageDown\":\n          outputValue = this._handleValueDecreaseWithKeyBoard(10 * step, handler);\n          break;\n\n        case \"Home\":\n          outputValue = this._handleHomeKey(handler);\n          break;\n\n        case \"End\":\n          outputValue = this._handleEndKey(handler);\n          break;\n\n        case 'default':\n          break;\n      }\n\n      if ([\"ArrowLeft\", \"ArrowDown\", \"ArrowRight\", \"ArrowUp\", \"PageUp\", \"PageDown\", \"Home\", \"End\"].includes(event.key)) {\n        let update = true;\n\n        if (Array.isArray(currentValue)) {\n          update = !(currentValue[0] === outputValue[0] && currentValue[1] === outputValue[1]);\n        } else {\n          update = currentValue !== outputValue;\n        }\n\n        if (update) {\n          this._adapter.updateCurrentValue(outputValue);\n\n          this._adapter.notifyChange(outputValue);\n        }\n\n        handlePrevent(event);\n      }\n    }; // eslint-disable-next-line @typescript-eslint/no-empty-function\n\n\n    this.onFocus = (e, handler) => {\n      handlePrevent(e);\n      const {\n        target\n      } = e;\n\n      try {\n        if (target.matches(':focus-visible')) {\n          if (handler === 'min') {\n            this._adapter.setStateVal('firstDotFocusVisible', true);\n          } else {\n            this._adapter.setStateVal('secondDotFocusVisible', true);\n          }\n        }\n      } catch (error) {\n        warning(true, 'Warning: [Semi Slider] The current browser does not support the focus-visible');\n      }\n    };\n\n    this.onBlur = (e, handler) => {\n      const {\n        firstDotFocusVisible,\n        secondDotFocusVisible\n      } = this.getStates();\n\n      if (handler === 'min') {\n        firstDotFocusVisible && this._adapter.setStateVal('firstDotFocusVisible', false);\n      } else {\n        secondDotFocusVisible && this._adapter.setStateVal('secondDotFocusVisible', false);\n      }\n    };\n\n    this.handleWrapClick = e => {\n      const {\n        disabled,\n        isDrag\n      } = this._adapter.getStates();\n\n      if (isDrag || disabled || this._adapter.isEventFromHandle(e)) {\n        return;\n      }\n\n      const {\n        vertical\n      } = this.getProps();\n      const mousePos = this.handleMousePos(e.pageX, e.pageY);\n      const position = vertical ? mousePos.y : mousePos.x;\n      const isMin = this.checkWhichHandle(position);\n      const outPutValue = this.calculateOutputValue(position, isMin);\n\n      if (outPutValue === undefined) {\n        return;\n      }\n\n      this._adapter.notifyChange(outPutValue); // check if is controlled component\n\n\n      if (this._isControlledComponent()) {\n        // only perform callback ops, skip UI update\n        return;\n      } // trigger UI state update\n\n\n      this.setHandlePos(position, isMin, true, outPutValue);\n    };\n    /**\n     * Move the slider to the current click position\n     *\n     * @memberof SliderFoundation\n     */\n\n\n    this.setHandlePos = function (position, isMin) {\n      let clickTrack = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      let outPutValue = arguments.length > 3 ? arguments[3] : undefined;\n\n      _this._adapter.onHandleMove(position, isMin, () => _this._adapter.onHandleUpAfter(), clickTrack, outPutValue);\n    };\n    /**\n     * Determine which slider should be moved currently\n     *\n     * @memberof SliderFoundation\n     */\n\n\n    this.checkWhichHandle = pagePos => {\n      const {\n        vertical,\n        verticalReverse\n      } = this.getProps();\n\n      const {\n        currentValue\n      } = this._adapter.getStates();\n\n      const currentPos = this.transValueToPos(currentValue);\n      let isMin = true;\n\n      if (Array.isArray(currentPos)) {\n        // Slide on both sides\n        if (pagePos > currentPos[1] || Math.abs(pagePos - currentPos[0]) > Math.abs(pagePos - currentPos[1])) {\n          isMin = false;\n        }\n      }\n\n      if (vertical && verticalReverse) {\n        isMin = !isMin;\n      }\n\n      return isMin;\n    };\n\n    this.handleWrapperEnter = () => {\n      this._adapter.setStateVal('showBoundary', true);\n    };\n\n    this.handleWrapperLeave = () => {\n      this._adapter.setStateVal('showBoundary', false);\n    };\n  }\n\n  init() {\n    this._checkCurrentValue();\n\n    this._dragOffset = 0;\n  }\n\n  _checkCurrentValue() {\n    const {\n      currentValue,\n      min,\n      max\n    } = this.getStates();\n    let checked;\n\n    if (Array.isArray(currentValue)) {\n      checked = [];\n      checked[0] = this._checkValidity(currentValue[0], min, max);\n      checked[1] = this._checkValidity(currentValue[1], min, max);\n    } else {\n      checked = this._checkValidity(currentValue, min, max);\n    }\n\n    this._adapter.updateCurrentValue(checked);\n  }\n  /**\n   * Untie event\n   * @memberof SliderFoundation\n   */\n\n\n  destroy() {\n    // debugger\n    this._adapter.unSubscribeEventListener();\n  }\n\n  _getHandleCenterPosition(vertical, handle) {\n    const pos = handle.getBoundingClientRect();\n    const {\n      x,\n      y\n    } = this.handleMousePos(pos.left + pos.width * 0.5, pos.top + pos.height * 0.5);\n    return vertical ? y : x;\n  }\n\n}"],
  "mappings": "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",
  "names": []
}
