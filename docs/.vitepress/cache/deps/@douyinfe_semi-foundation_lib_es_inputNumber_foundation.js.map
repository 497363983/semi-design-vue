{
  "version": 3,
  "sources": ["../../../../node_modules/.pnpm/@douyinfe+semi-foundation@2.34.0/node_modules/@douyinfe/semi-foundation/lib/es/inputNumber/foundation.js", "../../../../node_modules/.pnpm/@douyinfe+semi-foundation@2.34.0/node_modules/@douyinfe/semi-foundation/lib/es/utils/number.js"],
  "sourcesContent": ["import _isString from \"lodash/isString\";\nimport _get from \"lodash/get\";\nimport _toString from \"lodash/toString\";\nimport _toNumber from \"lodash/toNumber\";\n\n/* eslint-disable max-len */\n\n/* eslint-disable no-param-reassign */\n\n/* eslint-disable eqeqeq */\nimport BaseFoundation from '../base/foundation';\nimport keyCode from '../utils/keyCode';\nimport { numbers } from './constants';\nimport { minus as numberMinus } from '../utils/number';\n\nclass InputNumberFoundation extends BaseFoundation {\n  init() {\n    this._setInitValue();\n  }\n\n  destroy() {\n    this._unregisterInterval();\n\n    this._unregisterTimer();\n\n    this._adapter.unregisterGlobalEvent('mouseup');\n  }\n\n  isControlled() {\n    return this._isControlledComponent('value');\n  }\n\n  _doInput() {\n    let v = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    let event = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    let updateCb = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    let notifyVal = v;\n    let number = v;\n    let isValidNumber = true;\n    const isControlled = this.isControlled(); // console.log(v);\n\n    if (typeof v !== 'number') {\n      number = this.doParse(v, false);\n      isValidNumber = !isNaN(number);\n    }\n\n    if (isValidNumber) {\n      notifyVal = number;\n\n      if (!isControlled) {\n        this._adapter.setNumber(number);\n      }\n    }\n\n    if (!isControlled) {\n      this._adapter.setValue(v, updateCb);\n    }\n\n    if (this.getProp('keepFocus')) {\n      this._adapter.setFocusing(true, () => {\n        this._adapter.setClickUpOrDown(true);\n      });\n    }\n\n    this.notifyChange(notifyVal, event);\n  }\n\n  _registerInterval(cb) {\n    const pressInterval = this.getProp('pressInterval') || numbers.DEFAULT_PRESS_INTERVAL;\n    this._intervalHasRegistered = true;\n    this._interval = setInterval(() => {\n      if (typeof cb === 'function' && this._intervalHasRegistered) {\n        cb();\n      }\n    }, pressInterval);\n  }\n\n  _unregisterInterval() {\n    if (this._interval) {\n      this._intervalHasRegistered = false;\n      clearInterval(this._interval);\n      this._interval = null;\n    }\n  }\n\n  _registerTimer(cb) {\n    const pressTimeout = this.getProp('pressTimeout') || numbers.DEFAULT_PRESS_TIMEOUT;\n    this._timerHasRegistered = true;\n    this._timer = setTimeout(() => {\n      if (this._timerHasRegistered && typeof cb === 'function') {\n        cb();\n      }\n    }, pressTimeout);\n  }\n\n  _unregisterTimer() {\n    if (this._timer) {\n      this._timerHasRegistered = false;\n      clearTimeout(this._timer);\n      this._timer = null;\n    }\n  }\n\n  handleInputFocus(e) {\n    const value = this.getState('value');\n\n    if (value !== '') {// let parsedStr = this.doParse(this.getState('value'));\n      // this._adapter.setValue(Number(parsedStr));\n    }\n\n    this._adapter.recordCursorPosition();\n\n    this._adapter.setFocusing(true, null);\n\n    this._adapter.setClickUpOrDown(false);\n\n    this._adapter.notifyFocus(e);\n  }\n  /**\n   * Input box content update processing\n   * @param {String} value\n   * @param {*} event\n   */\n\n\n  handleInputChange(value, event) {\n    // Check accuracy, adjust accuracy, adjust maximum and minimum values, call parser to parse the number\n    const parsedNum = this.doParse(value, true, true, true); // Parser parsed number, type Number (normal number or NaN)\n\n    const toNum = this.doParse(value, false, false, false); // String converted from parser parsed numbers or directly converted without parser\n\n    const valueAfterParser = this.afterParser(value);\n\n    this._adapter.recordCursorPosition();\n\n    let notifyVal;\n    let num = toNum; // The formatted input value\n\n    let formattedNum = value;\n\n    if (value === '') {\n      if (!this.isControlled()) {\n        num = null;\n      }\n    } else if (this.isValidNumber(toNum) && this.isValidNumber(parsedNum)) {\n      notifyVal = toNum;\n      formattedNum = this.doFormat(toNum, false);\n    } else {\n      /**\n       * This logic is used to solve the problem that parsedNum is not a valid number\n       */\n      if (typeof toNum === 'number' && !isNaN(toNum)) {\n        formattedNum = this.doFormat(toNum, false); // console.log(`parsedStr: `, parsedStr, `toNum: `, toNum);\n\n        const dotIndex = valueAfterParser.lastIndexOf('.');\n        const lengthAfterDot = valueAfterParser.length - 1 - dotIndex;\n\n        const precLength = this._getPrecLen(toNum);\n\n        if (!precLength) {\n          const dotBeginStr = dotIndex > -1 ? valueAfterParser.slice(dotIndex) : '';\n          formattedNum += dotBeginStr;\n        } else if (precLength < lengthAfterDot) {\n          // eslint-disable-next-line max-depth\n          for (let i = 0; i < lengthAfterDot - precLength; i++) {\n            formattedNum += '0';\n          }\n        } // NOUSE:\n\n\n        num = toNum;\n      } else {\n        /**\n         * When the user enters an illegal character, it needs to go through parser and format before displaying\n         * Ensure that all input is processed by parser and format\n         *\n         * 用户输入非法字符时，需要经过 parser 和 format 一下再显示\n         * 保证所有的输入都经过 parser 和 format 处理\n         */\n        formattedNum = this.doFormat(valueAfterParser, false);\n      }\n\n      notifyVal = valueAfterParser;\n    }\n\n    if (!this.isControlled() && (num === null || typeof num === 'number' && !isNaN(num))) {\n      this._adapter.setNumber(num);\n    }\n\n    this._adapter.setValue(this.isControlled() ? formattedNum : this.doFormat(valueAfterParser, false), () => {\n      this._adapter.restoreCursor();\n    });\n\n    this.notifyChange(notifyVal, event);\n  }\n\n  handleInputKeyDown(event) {\n    const code = event.keyCode;\n\n    if (code === keyCode.UP || code === keyCode.DOWN) {\n      this._adapter.setClickUpOrDown(true);\n\n      this._adapter.recordCursorPosition();\n\n      const formattedVal = code === keyCode.UP ? this.add(null, event) : this.minus(null, event);\n\n      this._doInput(formattedVal, event, () => {\n        this._adapter.restoreCursor();\n      });\n\n      event.preventDefault();\n    }\n\n    this._adapter.notifyKeyDown(event);\n  }\n\n  handleInputBlur(e) {\n    const currentValue = _toString(this.getState('value'));\n\n    let currentNumber = this.getState('number');\n\n    if (currentNumber != null || currentValue != null && currentValue !== '') {\n      const parsedNum = this.doParse(currentValue, false, true, true);\n      let numHasChanged = false;\n      let strHasChanged = false;\n      let willSetNum, willSetVal;\n\n      if (this.isValidNumber(parsedNum) && currentNumber !== parsedNum) {\n        willSetNum = parsedNum;\n\n        if (!this.isControlled()) {\n          currentNumber = willSetNum;\n        }\n\n        numHasChanged = true;\n      }\n\n      const currentFormattedNum = this.doFormat(currentNumber, true);\n\n      if (currentFormattedNum !== currentValue) {\n        willSetVal = currentFormattedNum;\n        strHasChanged = true;\n      }\n\n      if (strHasChanged || numHasChanged) {\n        const notifyVal = willSetVal != null ? willSetVal : willSetNum;\n\n        if (willSetVal != null) {\n          this._adapter.setValue(willSetVal); // this.notifyChange(willSetVal);\n\n        }\n\n        if (willSetNum != null) {\n          // eslint-disable-next-line max-depth\n          if (!this._isControlledComponent('value')) {\n            this._adapter.setNumber(willSetNum);\n          } // this.notifyChange(willSetNum);\n\n        }\n\n        this.notifyChange(notifyVal, e);\n      }\n    }\n\n    this._adapter.setFocusing(false);\n\n    this._adapter.notifyBlur(e);\n  }\n\n  handleInputMouseEnter(event) {\n    this._adapter.setHovering(true);\n  }\n\n  handleInputMouseLeave(event) {\n    this._adapter.setHovering(false);\n  }\n\n  handleInputMouseMove(event) {\n    this._adapter.setHovering(true);\n  }\n\n  handleMouseUp(e) {\n    this._unregisterInterval();\n\n    this._unregisterTimer();\n\n    this._adapter.unregisterGlobalEvent('mouseup');\n  }\n\n  handleUpClick(event) {\n    const {\n      readonly\n    } = this.getProps();\n\n    if (!this._isMouseButtonLeft(event) || readonly) {\n      return;\n    }\n\n    this._adapter.setClickUpOrDown(true);\n\n    if (event) {\n      this._persistEvent(event);\n\n      event.stopPropagation(); // Prevent native blurring events\n\n      this._preventDefault(event);\n    }\n\n    this.upClick(event); // Cannot access event objects asynchronously https://reactjs.org/docs/events.html#event-pooling\n\n    this._registerTimer(() => {\n      this._registerInterval(() => {\n        this.upClick(event);\n      });\n    });\n  }\n\n  handleDownClick(event) {\n    const {\n      readonly\n    } = this.getProps();\n\n    if (!this._isMouseButtonLeft(event) || readonly) {\n      return;\n    }\n\n    this._adapter.setClickUpOrDown(true);\n\n    if (event) {\n      this._persistEvent(event);\n\n      event.stopPropagation();\n\n      this._preventDefault(event);\n    }\n\n    this.downClick(event);\n\n    this._registerTimer(() => {\n      this._registerInterval(() => {\n        this.downClick(event);\n      });\n    });\n  }\n  /**\n   * Whether it is a left mouse button click\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button\n   */\n\n\n  _isMouseButtonLeft(event) {\n    return _get(event, 'button') === numbers.MOUSE_BUTTON_LEFT;\n  }\n\n  _preventDefault(event) {\n    const keepFocus = this._adapter.getProp('keepFocus');\n\n    const innerButtons = this._adapter.getProp('innerButtons');\n\n    if (keepFocus || innerButtons) {\n      event.preventDefault();\n    }\n  }\n\n  handleMouseLeave(event) {\n    this._adapter.registerGlobalEvent('mouseup', () => {\n      this.handleMouseUp(event);\n    });\n  }\n\n  upClick(event) {\n    const value = this.add(null, event);\n\n    this._doInput(value, event);\n\n    this._adapter.notifyUpClick(value, event);\n  }\n\n  downClick(event) {\n    const value = this.minus(null, event);\n\n    this._doInput(value, event);\n\n    this._adapter.notifyDownClick(value, event);\n  }\n\n  _setInitValue() {\n    const {\n      defaultValue,\n      value\n    } = this.getProps();\n    const propsValue = this._isControlledComponent('value') ? value : defaultValue;\n    const tmpNumber = this.doParse(_toString(propsValue), false, true, true);\n    let number = null;\n\n    if (typeof tmpNumber === 'number' && !isNaN(tmpNumber)) {\n      number = tmpNumber;\n    }\n\n    const formattedValue = typeof number === 'number' ? this.doFormat(number, true) : '';\n\n    this._adapter.setNumber(number);\n\n    this._adapter.setValue(formattedValue);\n\n    if (_isString(formattedValue) && formattedValue !== String(propsValue !== null && propsValue !== void 0 ? propsValue : '')) {\n      this.notifyChange(formattedValue, null);\n    }\n  }\n\n  add(step, event) {\n    const pressShift = event && event.shiftKey;\n    const propStep = pressShift ? this.getProp('shiftStep') : this.getProp('step');\n    step = step == null ? propStep : Number(step);\n    const stepAbs = Math.abs(_toNumber(step));\n    const curVal = this.getState('number');\n    let curNum = this.toNumber(curVal) || 0;\n    const min = this.getProp('min');\n    const max = this.getProp('max');\n\n    const minPrecLen = this._getPrecLen(min);\n\n    const maxPrecLen = this._getPrecLen(max);\n\n    const curPrecLen = this._getPrecLen(curNum);\n\n    const stepPrecLen = this._getPrecLen(step);\n\n    const scale = Math.pow(10, Math.max(minPrecLen, maxPrecLen, curPrecLen, stepPrecLen));\n\n    if (step < 0) {\n      // Js accuracy problem\n      if (Math.abs(numberMinus(min, curNum)) >= stepAbs) {\n        curNum = (curNum * scale + step * scale) / scale;\n      }\n    } else if (step > 0) {\n      if (Math.abs(numberMinus(max, curNum)) >= stepAbs) {\n        curNum = (curNum * scale + step * scale) / scale;\n      }\n    }\n\n    if (typeof min === 'number' && min > curNum) {\n      curNum = min;\n    }\n\n    if (typeof max === 'number' && max < curNum) {\n      curNum = max;\n    } // console.log('scale: ', scale, 'curNum: ', curNum);\n\n\n    return this.doFormat(curNum, true);\n  }\n\n  minus(step, event) {\n    const pressShift = event && event.shiftKey;\n    const propStep = pressShift ? this.getProp('shiftStep') : this.getProp('step');\n    step = step == null ? propStep : Number(step);\n    return this.add(-step, event);\n  }\n  /**\n   * get decimal length\n   * @param {number} num\n   * @returns {number}\n   */\n\n\n  _getPrecLen(num) {\n    if (typeof num !== 'string') {\n      num = String(Math.abs(Number(num || '')));\n    }\n\n    const idx = num.indexOf('.') + 1;\n    return idx ? num.length - idx : 0;\n  }\n\n  _adjustPrec(num) {\n    const precision = this.getProp('precision');\n\n    if (typeof precision === 'number' && num !== '' && num !== null && !Number.isNaN(Number(num))) {\n      num = Number(num).toFixed(precision);\n    }\n\n    return _toString(num);\n  }\n  /**\n   * format number to string\n   * @param {string|number} value\n   * @param {boolean} needAdjustPrec\n   * @returns {string}\n   */\n\n\n  doFormat() {\n    let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let needAdjustPrec = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    // if (typeof value === 'string') {\n    //     return value;\n    // }\n    let str;\n    const formatter = this.getProp('formatter');\n\n    if (needAdjustPrec) {\n      str = this._adjustPrec(value);\n    } else {\n      str = _toString(value);\n    }\n\n    if (typeof formatter === 'function') {\n      str = formatter(str);\n    }\n\n    return str;\n  }\n  /**\n   *\n   * @param {number} current\n   * @returns {number}\n   */\n\n\n  fetchMinOrMax(current) {\n    const {\n      min,\n      max\n    } = this.getProps();\n\n    if (current < min) {\n      return min;\n    } else if (current > max) {\n      return max;\n    }\n\n    return current;\n  }\n  /**\n   * parse to number\n   * @param {string|number} value\n   * @param {boolean} needCheckPrec\n   * @param {boolean} needAdjustPrec\n   * @param {boolean} needAdjustMaxMin\n   * @returns {number}\n   */\n\n\n  doParse(value) {\n    let needCheckPrec = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let needAdjustPrec = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let needAdjustMaxMin = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n    if (typeof value === 'number') {\n      if (needAdjustMaxMin) {\n        value = this.fetchMinOrMax(value);\n      }\n\n      if (needAdjustPrec) {\n        value = this._adjustPrec(value);\n      }\n\n      return _toNumber(value);\n    }\n\n    const parser = this.getProp('parser');\n\n    if (typeof parser === 'function') {\n      value = parser(value);\n    }\n\n    if (needCheckPrec && typeof value === 'string') {\n      const zeroIsValid = value.indexOf('.') === -1 || value.indexOf('.') > -1 && (value === '0' || value.lastIndexOf('0') < value.length - 1);\n      const dotIsValid = value.lastIndexOf('.') < value.length - 1 && value.split('').filter(v => v === '.').length < 2;\n\n      if (!zeroIsValid || !dotIsValid // (this.getProp('precision') > 0 && this._getPrecLen(value) > this.getProp('precision'))\n      ) {\n        return NaN;\n      }\n    }\n\n    if (needAdjustPrec) {\n      value = this._adjustPrec(value);\n    }\n\n    if (typeof value === 'string' && value.length) {\n      return needAdjustMaxMin ? this.fetchMinOrMax(_toNumber(value)) : _toNumber(value);\n    }\n\n    return NaN;\n  }\n  /**\n   * Parsing the input value\n   * @param {string} value\n   * @returns {string}\n   */\n\n\n  afterParser(value) {\n    const parser = this.getProp('parser');\n\n    if (typeof value === 'string' && typeof parser === 'function') {\n      return _toString(parser(value));\n    }\n\n    return _toString(value);\n  }\n\n  toNumber(value) {\n    let needAdjustPrec = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n    if (typeof value === 'number') {\n      return value;\n    }\n\n    if (typeof value === 'string') {\n      const parser = this.getProp('parser');\n\n      if (typeof parser === 'function') {\n        value = parser(value);\n      }\n\n      if (needAdjustPrec) {\n        value = this._adjustPrec(value);\n      }\n    }\n\n    return _toNumber(value);\n  }\n  /**\n   * Returning true requires both:\n   * 1.type is number and not equal to NaN\n   * 2.min < = value < = max\n   * 3.length after decimal point requires < = precision | | No precision\n   * @param {*} um\n   * @param {*} needCheckPrec\n   * @returns\n   */\n\n\n  isValidNumber(num) {\n    let needCheckPrec = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n    if (typeof num === 'number' && !isNaN(num)) {\n      const {\n        min,\n        max,\n        precision\n      } = this.getProps();\n\n      const numPrec = this._getPrecLen(num);\n\n      const precIsValid = needCheckPrec ? typeof precision === 'number' && numPrec <= precision || typeof precision !== 'number' : true;\n\n      if (num >= min && num <= max && precIsValid) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  isValidString(str) {\n    if (typeof str === 'string' && str.length) {\n      const parsedNum = this.doParse(str);\n      return this.isValidNumber(parsedNum);\n    }\n\n    return false;\n  }\n\n  notifyChange(value, e) {\n    if (value == null || value === '') {\n      this._adapter.notifyChange('', e);\n    } else {\n      const parsedNum = this.toNumber(value, true);\n\n      if (typeof parsedNum === 'number' && !isNaN(parsedNum)) {\n        // this._adapter.notifyChange(typeof value === 'number' ? parsedNum : this.afterParser(value), e);\n        this._adapter.notifyChange(parsedNum, e);\n\n        this.notifyNumberChange(parsedNum, e);\n      } else {\n        this._adapter.notifyChange(this.afterParser(value), e);\n      }\n    }\n  }\n\n  notifyNumberChange(value, e) {\n    const {\n      number\n    } = this.getStates(); // Does not trigger numberChange if value is not a significant number\n\n    if (this.isValidNumber(value) && value !== number) {\n      this._adapter.notifyNumberChange(value, e);\n    }\n  }\n\n  updateStates(states, callback) {\n    this._adapter.updateStates(states, callback);\n  }\n\n}\n\nexport default InputNumberFoundation;", "/**\n * Solve the problem of js addition accuracy\n * e.g.\n *  0.1 + 0.2 => 0.30000000000000004\n *  plus(0.1, 0.2) => 0.3\n * @param {Number} num1\n * @param {Number} num2\n */\nexport function plus(num1, num2) {\n  const num1Digits = (num1.toString().split('.')[1] || '').length;\n  const num2Digits = (num2.toString().split('.')[1] || '').length;\n  const baseNum = Math.pow(10, Math.max(num1Digits, num2Digits));\n  return (num1 * baseNum + num2 * baseNum) / baseNum;\n}\nexport function minus(num1, num2) {\n  return plus(num1, -num2);\n}"],
  "mappings": "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",
  "names": ["_toString", "_get", "_isString", "_toNumber", "foundation_default"]
}
