{
  "version": 3,
  "sources": ["../../../../node_modules/.pnpm/@douyinfe+semi-foundation@2.34.0/node_modules/@douyinfe/semi-foundation/lib/es/treeSelect/foundation.js"],
  "sourcesContent": ["import _difference from \"lodash/difference\";\nimport _isEmpty from \"lodash/isEmpty\";\nimport _cloneDeep from \"lodash/cloneDeep\";\nimport _isString from \"lodash/isString\";\nimport _isUndefined from \"lodash/isUndefined\";\nimport _get from \"lodash/get\";\nimport _isFunction from \"lodash/isFunction\";\nimport _isNumber from \"lodash/isNumber\";\nimport { strings } from '../treeSelect/constants';\nimport BaseFoundation from '../base/foundation';\nimport { flattenTreeData, findDescendantKeys, findAncestorKeys, filter, normalizedArr, normalizeKeyList, getMotionKeys, calcCheckedKeysForChecked, calcCheckedKeys, calcCheckedKeysForUnchecked, getValueOrKey } from '../tree/treeUtil';\nimport isEnterPress from '../utils/isEnterPress'; // eslint-disable-next-line max-len\n\nexport default class TreeSelectFoundation extends BaseFoundation {\n  constructor(adapter) {\n    super(Object.assign({}, adapter));\n\n    this._registerClickOutsideHandler = e => {\n      this._adapter.registerClickOutsideHandler(e => {\n        this.handlerTriggerBlur(e);\n        this.close(e);\n      });\n    };\n  }\n\n  init() {\n    const {\n      searchAutoFocus,\n      searchPosition,\n      filterTreeNode\n    } = this.getProps();\n    const triggerSearch = searchPosition === strings.SEARCH_POSITION_TRIGGER && filterTreeNode;\n    const triggerSearchAutoFocus = searchAutoFocus && triggerSearch;\n\n    this._setDropdownWidth();\n\n    const isOpen = (this.getProp('defaultOpen') || triggerSearchAutoFocus) && !this._isDisabled();\n\n    if (isOpen) {\n      this.open();\n    }\n\n    if (triggerSearchAutoFocus) {\n      this.handleTriggerFocus(null);\n    }\n  }\n\n  destroy() {\n    // Ensure that event monitoring will be uninstalled, and the user may not trigger closePanel\n    this._adapter.unregisterClickOutsideHandler();\n  }\n\n  _setDropdownWidth() {\n    const {\n      style,\n      dropdownMatchSelectWidth\n    } = this.getProps();\n    let width;\n\n    if (dropdownMatchSelectWidth) {\n      if (style && _isNumber(style.width)) {\n        width = style.width;\n      } else if (style && _isString(style.width) && !style.width.includes('%')) {\n        width = style.width;\n      } else {\n        width = this._adapter.getTriggerWidth();\n      }\n\n      this._adapter.setOptionWrapperWidth(width);\n    }\n  }\n\n  _isMultiple() {\n    return this.getProp('multiple');\n  }\n\n  _isAnimated() {\n    return this.getProp('motionExpand');\n  }\n\n  _isDisabled() {\n    let treeNode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.getProp('disabled') || treeNode.disabled;\n  }\n\n  _isExpandControlled() {\n    return this.getProp('expandedKeys');\n  }\n\n  _isSelectToClose() {\n    return !this.getProp('expandAction');\n  }\n\n  _isLoadControlled() {\n    return this.getProp('loadedKeys');\n  }\n\n  _showFilteredOnly() {\n    const {\n      inputValue\n    } = this.getStates();\n    const {\n      showFilteredOnly\n    } = this.getProps();\n    return Boolean(inputValue) && showFilteredOnly;\n  }\n\n  findDataForValue(findValue) {\n    const {\n      value,\n      defaultValue\n    } = this.getProps();\n    let valueArr = [];\n\n    if (value) {\n      valueArr = Array.isArray(value) ? value : [value];\n    } else if (defaultValue) {\n      valueArr = Array.isArray(defaultValue) ? defaultValue : [defaultValue];\n    }\n\n    return valueArr.find(item => {\n      return item.value === findValue || item.key === findValue;\n    });\n  }\n\n  constructDataForValue(value) {\n    const {\n      treeNodeLabelProp\n    } = this.getProps();\n    return {\n      key: value,\n      [treeNodeLabelProp]: value\n    };\n  }\n\n  getDataForKeyNotInKeyEntities(value) {\n    const {\n      onChangeWithObject\n    } = this.getProps();\n\n    if (onChangeWithObject) {\n      return this.findDataForValue(value);\n    } else {\n      return this.constructDataForValue(value);\n    }\n  }\n\n  getCopyFromState(items) {\n    const res = {};\n    normalizedArr(items).forEach(key => {\n      res[key] = _cloneDeep(this.getState(key));\n    });\n    return res;\n  }\n\n  getTreeNodeProps(key) {\n    const {\n      expandedKeys = new Set([]),\n      selectedKeys = [],\n      checkedKeys = new Set([]),\n      halfCheckedKeys = new Set([]),\n      realCheckedKeys = new Set([]),\n      keyEntities = {},\n      filteredKeys = new Set([]),\n      inputValue = '',\n      loadedKeys,\n      loadingKeys,\n      filteredExpandedKeys = new Set([]),\n      disabledKeys = new Set([])\n    } = this.getStates();\n    const {\n      treeNodeFilterProp,\n      checkRelation\n    } = this.getProps();\n    const entity = keyEntities[key];\n    const notExist = !entity;\n\n    if (notExist) {\n      return null;\n    } // if checkRelation is invalid, the checked status of node will be false\n\n\n    let realChecked = false;\n    let realHalfChecked = false;\n\n    if (checkRelation === 'related') {\n      realChecked = checkedKeys.has(key);\n      realHalfChecked = halfCheckedKeys.has(key);\n    } else if (checkRelation === 'unRelated') {\n      realChecked = realCheckedKeys.has(key);\n      realHalfChecked = false;\n    }\n\n    const isSearching = Boolean(inputValue);\n    const treeNodeProps = {\n      eventKey: key,\n      expanded: isSearching && !this._isExpandControlled() ? filteredExpandedKeys.has(key) : expandedKeys.has(key),\n      selected: selectedKeys.includes(key),\n      checked: realChecked,\n      halfChecked: realHalfChecked,\n      pos: String(entity ? entity.pos : ''),\n      level: entity.level,\n      filtered: filteredKeys.has(key),\n      keyword: inputValue,\n      treeNodeFilterProp,\n      loading: loadingKeys.has(key) && !loadedKeys.has(key),\n      loaded: loadedKeys.has(key)\n    };\n\n    if (this.getProp('disableStrictly') && disabledKeys.has(key)) {\n      treeNodeProps.disabled = true;\n    }\n\n    return treeNodeProps;\n  }\n\n  handleNodeLoad(loadedKeys, loadingKeys, data, resolve) {\n    const {\n      loadData\n    } = this.getProps();\n    const {\n      key\n    } = data;\n\n    if (!loadData || loadedKeys.has(key) || loadingKeys.has(key)) {\n      return {};\n    }\n\n    loadData(data).then(() => {\n      const {\n        loadedKeys: prevLoadedKeys,\n        loadingKeys: prevLoadingKeys\n      } = this.getCopyFromState(['loadedKeys', 'loadingKeys']);\n      const newLoadedKeys = prevLoadedKeys.add(key);\n      const newLoadingKeys = new Set([...prevLoadingKeys]);\n      newLoadingKeys.delete(key);\n\n      this._adapter.notifyLoad(newLoadedKeys, data);\n\n      if (!this._isLoadControlled()) {\n        this._adapter.updateState({\n          loadedKeys: newLoadedKeys\n        });\n      }\n\n      this._adapter.setState({\n        loadingKeys: newLoadingKeys\n      });\n\n      resolve();\n    });\n    return {\n      loadingKeys: loadingKeys.add(key)\n    };\n  }\n  /* istanbul ignore next */\n\n\n  focusInput(bool) {\n    this._adapter.updateInputFocus(bool);\n  }\n\n  _notifyMultipleChange(key, e) {\n    const {\n      keyEntities\n    } = this.getStates();\n    const {\n      leafOnly,\n      checkRelation\n    } = this.getProps();\n    let keyList = [];\n\n    if (checkRelation === 'related') {\n      keyList = normalizeKeyList(key, keyEntities, leafOnly, true);\n    } else if (checkRelation === 'unRelated') {\n      keyList = key;\n    }\n\n    const nodes = keyList.map(key => keyEntities[key] && keyEntities[key].data.key === key ? keyEntities[key].data : this.getDataForKeyNotInKeyEntities(key));\n\n    if (this.getProp('onChangeWithObject')) {\n      this._adapter.notifyChangeWithObject(nodes, e);\n    } else {\n      const value = getValueOrKey(nodes);\n\n      this._adapter.notifyChange(value, nodes, e);\n    }\n  }\n\n  _notifyChange(key, e) {\n    const {\n      keyEntities\n    } = this.getStates();\n\n    if (this._isMultiple() && Array.isArray(key)) {\n      this._notifyMultipleChange(key, e);\n    } else {\n      const nodes = _isUndefined(key) ? key : keyEntities[key].data;\n      const value = _isUndefined(key) ? key : getValueOrKey(nodes);\n\n      if (this.getProp('onChangeWithObject')) {\n        this._adapter.notifyChangeWithObject(nodes, e);\n      } else {\n        this._adapter.notifyChange(value, nodes, e);\n      }\n    }\n  } // Scenes that may trigger focus:\n  //  1、click selection\n\n\n  _notifyFocus(e) {\n    this._adapter.notifyFocus(e);\n  }\n\n  handleTriggerFocus(e) {\n    this._adapter.updateIsFocus(true);\n\n    this._notifyFocus(e);\n\n    this._registerClickOutsideHandler(e);\n  } // Scenes that may trigger blur\n  //  1、clickOutSide\n  //  2、click option / press enter, and then select complete（when multiple is false\n  //  3、press esc when dropdown list open\n\n\n  _notifyBlur(e) {\n    this._adapter.notifyBlur(e);\n  }\n\n  handlerTriggerBlur(e) {\n    this._adapter.updateIsFocus(false);\n\n    this._notifyBlur(e);\n\n    this._adapter.unregisterClickOutsideHandler();\n  }\n\n  toggleHoverState(bool) {\n    this._adapter.toggleHovering(bool);\n  }\n\n  open() {\n    this._adapter.openMenu();\n\n    this._setDropdownWidth();\n  }\n\n  close(e) {\n    this._adapter.closeMenu();\n\n    if (this.getProp('motionExpand')) {\n      this._adapter.updateState({\n        motionKeys: new Set([])\n      });\n    }\n  }\n\n  handleClick(e) {\n    const isDisabled = this._isDisabled();\n\n    const {\n      isOpen,\n      inputValue,\n      isFocus\n    } = this.getStates();\n    const {\n      searchPosition,\n      clickTriggerToHide\n    } = this.getProps();\n\n    if (isDisabled) {\n      return;\n    } else {\n      if (!isFocus) {\n        this.handleTriggerFocus(e);\n      }\n\n      if (isOpen) {\n        if (searchPosition === 'trigger' && inputValue) {\n          return;\n        }\n\n        clickTriggerToHide && this.close(e);\n      } else {\n        this.open();\n      }\n    }\n  }\n  /**\n   * A11y: simulate selection click\n   */\n\n  /* istanbul ignore next */\n\n\n  handleSelectionEnterPress(e) {\n    if (isEnterPress(e)) {\n      this.handleClick(e);\n    }\n  }\n\n  handleClear(e) {\n    const {\n      searchPosition,\n      filterTreeNode\n    } = this.getProps();\n    const {\n      inputValue,\n      selectedKeys\n    } = this.getStates();\n\n    const isMultiple = this._isMultiple();\n\n    const isControlled = this._isControlledComponent();\n\n    const value = isMultiple ? [] : undefined;\n\n    this._notifyChange(value, e);\n\n    if (!isControlled) {\n      // reposition dropdown when selected values change\n      this._adapter.rePositionDropdown();\n\n      this._adapter.updateState({\n        selectedKeys: [],\n        checkedKeys: new Set(),\n        halfCheckedKeys: new Set(),\n        realCheckedKeys: new Set([])\n      });\n    } // When triggerSearch, clicking the clear button will trigger to clear Input\n\n\n    if (filterTreeNode && searchPosition === strings.SEARCH_POSITION_TRIGGER) {\n      if (inputValue !== '') {\n        if (_isEmpty(selectedKeys)) {\n          this.handleInputChange('');\n        } else {\n          this.clearInput();\n        }\n      }\n    }\n  }\n  /**\n   * A11y: simulate clear button click\n   */\n\n  /* istanbul ignore next */\n\n\n  handleClearEnterPress(e) {\n    if (isEnterPress(e)) {\n      this.handleClear(e);\n    }\n  }\n\n  removeTag(eventKey) {\n    const {\n      disableStrictly,\n      checkRelation\n    } = this.getProps();\n    const {\n      keyEntities,\n      disabledKeys,\n      realCheckedKeys\n    } = this.getStates();\n    const item = keyEntities[eventKey] && keyEntities[eventKey].data.key === eventKey ? keyEntities[eventKey].data : this.getDataForKeyNotInKeyEntities(eventKey);\n\n    if (item.disabled || disableStrictly && disabledKeys.has(eventKey)) {\n      return;\n    }\n\n    if (checkRelation === 'unRelated') {\n      const newRealCheckedKeys = new Set(realCheckedKeys);\n      newRealCheckedKeys.delete(eventKey);\n\n      this._notifyChange([...newRealCheckedKeys], null);\n\n      if (!this._isControlledComponent()) {\n        this._adapter.updateState({\n          realCheckedKeys: newRealCheckedKeys\n        });\n\n        this._adapter.rePositionDropdown();\n      }\n    } else if (checkRelation === 'related') {\n      const {\n        checkedKeys,\n        halfCheckedKeys\n      } = this.calcCheckedKeys(eventKey, false);\n\n      this._notifyChange([...checkedKeys], null);\n\n      if (!this._isControlledComponent()) {\n        this._adapter.updateState({\n          checkedKeys,\n          halfCheckedKeys\n        });\n\n        this._adapter.rePositionDropdown();\n      }\n    }\n\n    this._adapter.notifySelect(eventKey, false, item); // reposition dropdown when selected values change\n\n\n    this._adapter.rePositionDropdown();\n  }\n\n  clearInput() {\n    const {\n      flattenNodes,\n      expandedKeys,\n      selectedKeys,\n      keyEntities,\n      treeData\n    } = this.getStates();\n    const newExpandedKeys = new Set(expandedKeys);\n\n    const isExpandControlled = this._isExpandControlled();\n\n    const expandedOptsKeys = findAncestorKeys(selectedKeys, keyEntities);\n    expandedOptsKeys.forEach(item => newExpandedKeys.add(item));\n    const newFlattenNodes = flattenTreeData(treeData, newExpandedKeys);\n\n    this._adapter.updateState({\n      expandedKeys: isExpandControlled ? expandedKeys : newExpandedKeys,\n      flattenNodes: isExpandControlled ? flattenNodes : newFlattenNodes,\n      inputValue: '',\n      motionKeys: new Set([]),\n      filteredKeys: new Set([]),\n      filteredExpandedKeys: new Set(expandedOptsKeys),\n      filteredShownKeys: new Set([])\n    });\n  }\n\n  handleInputChange(sugInput) {\n    // Input is used as controlled component\n    this._adapter.updateInputValue(sugInput);\n\n    const {\n      flattenNodes,\n      expandedKeys,\n      selectedKeys,\n      keyEntities,\n      treeData\n    } = this.getStates();\n    const {\n      showFilteredOnly,\n      filterTreeNode,\n      treeNodeFilterProp\n    } = this.getProps();\n    const newExpandedKeys = new Set(expandedKeys);\n    let filteredOptsKeys = [];\n    let expandedOptsKeys = [];\n    let newFlattenNodes = [];\n    let filteredShownKeys = new Set([]);\n\n    if (!sugInput) {\n      expandedOptsKeys = findAncestorKeys(selectedKeys, keyEntities);\n      expandedOptsKeys.forEach(item => newExpandedKeys.add(item));\n      newFlattenNodes = flattenTreeData(treeData, newExpandedKeys);\n    } else {\n      filteredOptsKeys = Object.values(keyEntities).filter(item => {\n        const {\n          data\n        } = item;\n        return filter(sugInput, data, filterTreeNode, treeNodeFilterProp);\n      }).map(item => item.key);\n      expandedOptsKeys = findAncestorKeys(filteredOptsKeys, keyEntities, false);\n      const shownChildKeys = findDescendantKeys(filteredOptsKeys, keyEntities, true);\n      filteredShownKeys = new Set([...shownChildKeys, ...expandedOptsKeys]);\n      newFlattenNodes = flattenTreeData(treeData, new Set(expandedOptsKeys), showFilteredOnly && filteredShownKeys);\n    }\n\n    const newFilteredExpandedKeys = new Set(expandedOptsKeys);\n\n    this._adapter.notifySearch(sugInput, Array.from(newFilteredExpandedKeys));\n\n    this._adapter.updateState({\n      expandedKeys: this._isExpandControlled() ? expandedKeys : newExpandedKeys,\n      flattenNodes: this._isExpandControlled() ? flattenNodes : newFlattenNodes,\n      motionKeys: new Set([]),\n      filteredKeys: new Set(filteredOptsKeys),\n      filteredExpandedKeys: newFilteredExpandedKeys,\n      filteredShownKeys\n    });\n  }\n\n  handleNodeSelect(e, treeNode) {\n    const isDisabled = this._isDisabled(treeNode);\n\n    if (isDisabled) {\n      return;\n    }\n\n    if (!this._isMultiple()) {\n      this.handleSingleSelect(e, treeNode);\n    } else {\n      this.handleMultipleSelect(e, treeNode);\n    }\n  }\n\n  handleSingleSelect(e, treeNode) {\n    let {\n      selectedKeys\n    } = this.getCopyFromState('selectedKeys');\n    const {\n      clickToHide\n    } = this.getProps();\n    const {\n      selected,\n      eventKey,\n      data\n    } = treeNode;\n\n    this._adapter.notifySelect(eventKey, true, data);\n\n    if (!selectedKeys.includes(eventKey) && !selected) {\n      selectedKeys = [eventKey];\n\n      this._notifyChange(eventKey, e);\n\n      if (!this._isControlledComponent()) {\n        this._adapter.updateState({\n          selectedKeys\n        });\n      }\n    }\n\n    if (clickToHide && (this._isSelectToClose() || !data.children)) {\n      this.close(e);\n      this.handlerTriggerBlur(e);\n    }\n  }\n\n  calcCheckedKeys(eventKey, targetStatus) {\n    const {\n      keyEntities\n    } = this.getStates();\n    const {\n      checkedKeys,\n      halfCheckedKeys\n    } = this.getCopyFromState(['checkedKeys', 'halfCheckedKeys']);\n\n    if (targetStatus) {\n      return calcCheckedKeysForChecked(eventKey, keyEntities, checkedKeys, halfCheckedKeys);\n    } else {\n      return calcCheckedKeysForUnchecked(eventKey, keyEntities, checkedKeys, halfCheckedKeys);\n    }\n  }\n\n  handleMultipleSelect(e, treeNode) {\n    const {\n      searchPosition,\n      disableStrictly,\n      checkRelation\n    } = this.getProps();\n    const {\n      inputValue,\n      realCheckedKeys\n    } = this.getStates();\n    const {\n      checked,\n      eventKey,\n      data\n    } = treeNode;\n\n    if (checkRelation === 'related') {\n      const targetStatus = disableStrictly ? this.calcCheckedStatus(!checked, eventKey) : !checked;\n      const {\n        checkedKeys,\n        halfCheckedKeys\n      } = disableStrictly ? this.calcNonDisabledCheckedKeys(eventKey, targetStatus) : this.calcCheckedKeys(eventKey, targetStatus);\n\n      this._adapter.notifySelect(eventKey, targetStatus, data);\n\n      this._notifyChange([...checkedKeys], e);\n\n      if (!this._isControlledComponent()) {\n        this._adapter.updateState({\n          checkedKeys,\n          halfCheckedKeys\n        });\n\n        this._adapter.rePositionDropdown();\n      }\n    } else if (checkRelation === 'unRelated') {\n      const newRealCheckedKeys = new Set(realCheckedKeys);\n      let targetStatus;\n\n      if (realCheckedKeys.has(eventKey)) {\n        newRealCheckedKeys.delete(eventKey);\n        targetStatus = false;\n      } else {\n        newRealCheckedKeys.add(eventKey);\n        targetStatus = true;\n      }\n\n      this._adapter.notifySelect(eventKey, targetStatus, data);\n\n      this._notifyChange([...newRealCheckedKeys], e);\n\n      if (!this._isControlledComponent()) {\n        this._adapter.updateState({\n          realCheckedKeys: newRealCheckedKeys\n        });\n\n        this._adapter.rePositionDropdown();\n      }\n    }\n\n    if (searchPosition === strings.SEARCH_POSITION_TRIGGER && inputValue !== '') {\n      this._adapter.updateState({\n        inputValue: ''\n      });\n    }\n  }\n\n  calcNonDisabledCheckedKeys(eventKey, targetStatus) {\n    const {\n      keyEntities,\n      disabledKeys\n    } = this.getStates();\n    const {\n      checkedKeys\n    } = this.getCopyFromState(['checkedKeys']);\n    const descendantKeys = normalizeKeyList(findDescendantKeys([eventKey], keyEntities, false), keyEntities, true);\n    const hasDisabled = descendantKeys.some(key => disabledKeys.has(key));\n\n    if (!hasDisabled) {\n      return this.calcCheckedKeys(eventKey, targetStatus);\n    }\n\n    const nonDisabled = descendantKeys.filter(key => !disabledKeys.has(key));\n    const newCheckedKeys = targetStatus ? [...nonDisabled, ...checkedKeys] : _difference(normalizeKeyList([...checkedKeys], keyEntities, true), nonDisabled);\n    return calcCheckedKeys(newCheckedKeys, keyEntities);\n  }\n\n  calcCheckedStatus(targetStatus, eventKey) {\n    if (!targetStatus) {\n      return targetStatus;\n    }\n\n    const {\n      checkedKeys,\n      keyEntities,\n      disabledKeys\n    } = this.getStates();\n    const descendantKeys = normalizeKeyList(findDescendantKeys([eventKey], keyEntities, false), keyEntities, true);\n    const hasDisabled = descendantKeys.some(key => disabledKeys.has(key));\n\n    if (!hasDisabled) {\n      return targetStatus;\n    }\n\n    const nonDisabledKeys = descendantKeys.filter(key => !disabledKeys.has(key));\n    const allChecked = nonDisabledKeys.every(key => checkedKeys.has(key));\n    return !allChecked;\n  }\n\n  handleNodeExpandInSearch(e, treeNode) {\n    const {\n      treeData,\n      filteredShownKeys,\n      keyEntities\n    } = this.getStates();\n\n    const showFilteredOnly = this._showFilteredOnly(); // clone otherwise will be modified unexpectedly\n\n\n    const {\n      filteredExpandedKeys\n    } = this.getCopyFromState('filteredExpandedKeys');\n    let motionType = 'show';\n    const {\n      eventKey,\n      expanded,\n      data\n    } = treeNode; // debugger;\n\n    if (!expanded) {\n      filteredExpandedKeys.add(eventKey);\n    } else if (filteredExpandedKeys.has(eventKey)) {\n      filteredExpandedKeys.delete(eventKey);\n      motionType = 'hide';\n    } // cache prev flattenNodes, otherwise the calculation will remove hidden items\n\n\n    this._adapter.cacheFlattenNodes(motionType === 'hide' && this._isAnimated());\n\n    if (!this._isExpandControlled()) {\n      // debugger;\n      const flattenNodes = flattenTreeData(treeData, filteredExpandedKeys, showFilteredOnly && filteredShownKeys);\n      const motionKeys = this._isAnimated() ? getMotionKeys(eventKey, filteredExpandedKeys, keyEntities) : [];\n      const newState = {\n        filteredExpandedKeys,\n        flattenNodes,\n        motionKeys: new Set(motionKeys),\n        motionType\n      };\n\n      this._adapter.updateState(newState);\n    }\n\n    this._adapter.notifyExpand(filteredExpandedKeys, {\n      expanded: !expanded,\n      node: data\n    });\n  }\n\n  handleNodeExpand(e, treeNode) {\n    // debugger;\n    const {\n      loadData\n    } = this.getProps();\n    const {\n      inputValue,\n      keyEntities\n    } = this.getStates();\n    const isSearching = Boolean(inputValue);\n\n    if (!loadData && (!treeNode.children || !treeNode.children.length)) {\n      return;\n    }\n\n    const isExpandControlled = this._isExpandControlled();\n\n    if (isSearching && !isExpandControlled) {\n      this.handleNodeExpandInSearch(e, treeNode);\n      return;\n    }\n\n    const {\n      treeData\n    } = this.getStates(); // clone otherwise will be modified unexpectedly\n\n    const {\n      expandedKeys\n    } = this.getCopyFromState('expandedKeys');\n    let motionType = 'show';\n    const {\n      eventKey,\n      expanded,\n      data\n    } = treeNode;\n\n    if (!expanded) {\n      expandedKeys.add(eventKey);\n    } else if (expandedKeys.has(eventKey)) {\n      expandedKeys.delete(eventKey);\n      motionType = 'hide';\n    }\n\n    this._adapter.cacheFlattenNodes(motionType === 'hide' && this._isAnimated());\n\n    if (!isExpandControlled) {\n      // debugger;\n      const flattenNodes = flattenTreeData(treeData, expandedKeys);\n      const motionKeys = this._isAnimated() ? getMotionKeys(eventKey, expandedKeys, keyEntities) : [];\n      const newState = {\n        expandedKeys,\n        flattenNodes,\n        motionKeys: new Set(motionKeys),\n        motionType\n      };\n\n      this._adapter.updateState(newState);\n    }\n\n    this._adapter.notifyExpand(expandedKeys, {\n      expanded: !expanded,\n      node: data\n    });\n  }\n  /**\n   * The selected items that need to be displayed in the search box when obtaining a single selection\n   */\n\n\n  getRenderTextInSingle() {\n    const {\n      renderSelectedItem: propRenderSelectedItem,\n      treeNodeLabelProp\n    } = this.getProps();\n    const {\n      selectedKeys,\n      keyEntities\n    } = this.getStates();\n    const renderSelectedItem = _isFunction(propRenderSelectedItem) ? propRenderSelectedItem : item => _get(item, treeNodeLabelProp, null);\n    let item;\n\n    if (selectedKeys.length) {\n      const key = selectedKeys[0];\n      item = keyEntities[key] && keyEntities[key].data.key === key ? keyEntities[key].data : this.getDataForKeyNotInKeyEntities(key);\n    }\n\n    const renderText = item && treeNodeLabelProp in item ? renderSelectedItem(item) : null;\n    return renderText;\n  }\n  /**\n   * When the search box is on the trigger, the blur event handling method\n   */\n\n\n  handleInputTriggerBlur() {\n    this._adapter.updateState({\n      inputTriggerFocus: false\n    });\n  }\n  /**\n   * When the search box is on the trigger, the focus event processing method\n   */\n\n\n  handleInputTriggerFocus() {\n    this.clearInput();\n\n    this._adapter.updateState({\n      inputTriggerFocus: true\n    });\n  }\n\n  setLoadKeys(data, resolve) {\n    this._adapter.updateLoadKeys(data, resolve);\n  }\n\n}"],
  "mappings": "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",
  "names": ["e", "_isNumber", "_isString", "_cloneDeep", "key", "_isUndefined", "_isEmpty", "_difference", "_isFunction", "item", "_get"]
}
