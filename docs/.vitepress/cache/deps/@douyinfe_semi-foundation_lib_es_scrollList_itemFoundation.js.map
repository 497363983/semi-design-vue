{
  "version": 3,
  "sources": ["../../../../node_modules/.pnpm/@douyinfe+semi-foundation@2.34.0/node_modules/@douyinfe/semi-foundation/lib/es/scrollList/itemFoundation.js"],
  "sourcesContent": ["import _findIndex from \"lodash/findIndex\";\nimport _find from \"lodash/find\";\nimport _slice from \"lodash/slice\";\nimport BaseFoundation from '../base/foundation';\nimport isElement from '../utils/isElement';\nimport { append, prepend } from '../utils/dom';\nexport default class ItemFoundation extends BaseFoundation {\n  constructor() {\n    super(...arguments);\n    this._cachedSelectedNode = null;\n  }\n\n  selectIndex(index, listWrapper) {\n    const {\n      type,\n      list\n    } = this.getProps();\n\n    if (index > -1 && Array.isArray(list) && list.length && isElement(listWrapper)) {\n      const indexInData = index % list.length;\n      const item = list[indexInData];\n      const node = listWrapper.children[index];\n\n      this._adapter.setSelectedNode(node);\n\n      this._adapter.notifySelectItem(Object.assign(Object.assign({}, item), {\n        value: item.value,\n        type,\n        index: indexInData\n      }));\n    }\n  }\n\n  selectNode(node, listWrapper) {\n    const {\n      type,\n      list: data\n    } = this.getProps();\n\n    if (isElement(node) && isElement(listWrapper)) {\n      const indexInList = _findIndex(listWrapper.children, ele => ele === node);\n\n      const indexInData = indexInList % data.length;\n\n      const cachedIndexInList = _findIndex(listWrapper.children, ele => ele === this._cachedSelectedNode);\n\n      const cachedIndexData = cachedIndexInList % data.length;\n      const item = data[indexInData];\n\n      this._adapter.setSelectedNode(node);\n\n      this._adapter.scrollToCenter(node); // Avoid triggerring notifySelectItem twice,\n      // because that scroll event will be trigger\n      // when you click to select an item.\n\n\n      if (this._cachedSelectedNode !== node) {\n        this._cachedSelectedNode = node;\n\n        if (cachedIndexData !== indexInData) {\n          this._adapter.notifySelectItem(Object.assign(Object.assign({}, item), {\n            value: item.value,\n            type,\n            index: indexInData\n          }));\n        }\n      }\n    }\n  }\n  /**\n   *\n   * @param {HTMLElement} listWrapper\n   * @param {HTMLElement} scrollWrapper\n   * @param {number} ratio\n   * @returns {boolean}\n   */\n\n\n  shouldAppend(listWrapper, scrollWrapper) {\n    let ratio = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2;\n    const tag = 'li';\n\n    if (isElement(listWrapper) && isElement(scrollWrapper)) {\n      const itemNodes = listWrapper.querySelectorAll(tag);\n      const lastNode = itemNodes[itemNodes.length - 1];\n      const {\n        list\n      } = this.getProps();\n\n      if (lastNode) {\n        const scrollRect = scrollWrapper.getBoundingClientRect();\n        const lastRect = lastNode.getBoundingClientRect();\n        const listHeight = lastRect.height * list.length;\n        let baseTop = lastRect.top;\n        let count = 0;\n\n        while (baseTop <= scrollRect.top + scrollRect.height * ratio) {\n          count += 1;\n          baseTop += listHeight;\n        }\n\n        return count;\n      }\n    }\n\n    return false;\n  }\n  /**\n   *\n   * @param {HTMLElement} listWrapper\n   * @param {HTMLElement} scrollWrapper\n   * @param {number} ratio\n   *\n   * @returns {boolean}\n   */\n\n\n  shouldPrepend(listWrapper, scrollWrapper) {\n    let ratio = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2;\n    const tag = 'li';\n\n    if (isElement(listWrapper) && isElement(scrollWrapper)) {\n      const itemNodes = listWrapper.querySelectorAll(tag);\n      const firstNode = itemNodes[0];\n      const {\n        list\n      } = this.getProps();\n\n      if (firstNode) {\n        const scrollRect = scrollWrapper.getBoundingClientRect();\n        const firstRect = firstNode.getBoundingClientRect();\n        const listHeight = firstRect.height * list.length;\n        let baseTop = firstRect.top;\n        let count = 0;\n\n        while (baseTop + firstRect.height >= scrollRect.top - scrollRect.height * ratio) {\n          count += 1;\n          baseTop -= listHeight;\n        }\n\n        return count;\n      }\n    }\n\n    return 0;\n  }\n  /**\n   *\n   * @param {HTMLElement} listWrapper\n   * @param {HTMLElement} wrapper\n   * @param {Function} [callback]\n   */\n\n\n  initWheelList(listWrapper, wrapper, callback) {\n    const {\n      list\n    } = this.getProps();\n\n    if (isElement(wrapper) && isElement(listWrapper) && list && list.length) {\n      const allNodes = listWrapper.children;\n\n      const baseNodes = _slice(allNodes, 0, list.length);\n\n      const prependCount = this.shouldPrepend(listWrapper, wrapper);\n      const appendCount = this.shouldAppend(listWrapper, wrapper); // this._adapter.setPrependCount(prependCount);\n      // this._adapter.setAppendCount(appendCount);\n\n      this._adapter.setState({\n        prependCount,\n        appendCount\n      }, callback);\n    }\n  }\n  /**\n   *\n   * @param {HTMLElement} listWrapper\n   * @param {HTMLElement} wrapper\n   * @param {HTMLElement} [nearestNode]\n   */\n\n\n  adjustInfiniteList(listWrapper, wrapper, nearestNode) {\n    const {\n      list\n    } = this.getProps();\n    const nodeTag = 'li';\n\n    if (isElement(wrapper) && isElement(listWrapper) && list && list.length) {\n      const allNodes = listWrapper.querySelectorAll(nodeTag);\n      const total = allNodes.length;\n      const ratio = 1;\n      const prependCount = this.shouldPrepend(listWrapper, wrapper, ratio);\n      const appendCount = this.shouldAppend(listWrapper, wrapper, ratio); // while (this.shouldPrepend(listWrapper, wrapper, nearestNode)) {\n\n      if (prependCount) {\n        // move last nodes to first position\n        for (let i = 0; i < prependCount; i++) {\n          const nodes = _slice(allNodes, total - list.length * (i + 1), total - list.length * i);\n\n          prepend(listWrapper, ...nodes);\n        }\n      } // while (this.shouldAppend(listWrapper, wrapper, nearestNode)) {\n\n\n      if (appendCount) {\n        for (let i = 0; i < appendCount; i++) {\n          const nodes = _slice(allNodes, i * list.length, (i + 1) * list.length);\n\n          append(listWrapper, ...nodes);\n        }\n      }\n    }\n  }\n  /**\n   *\n   * @param {HTMLElement} listWrapper\n   * @param {HTMLElement} selector\n   *\n   */\n\n\n  getNearestNodeInfo(listWrapper, selector) {\n    if (isElement(listWrapper) && isElement(selector)) {\n      const selectorRect = selector.getBoundingClientRect();\n      const selectorTop = selectorRect.top;\n      const itemNodes = listWrapper.querySelectorAll('li');\n      let nearestNode = null;\n      let nearestIndex = -1;\n      let nearestDistance = Infinity;\n      Array.from(itemNodes).map((node, index) => {\n        const rect = node.getBoundingClientRect();\n        const rectTop = rect.top;\n        const absDistance = Math.abs(rectTop - selectorTop);\n\n        if (absDistance < nearestDistance && !this._adapter.isDisabledIndex(index)) {\n          nearestDistance = absDistance;\n          nearestNode = node;\n          nearestIndex = index;\n        }\n      });\n      return {\n        nearestNode,\n        nearestIndex\n      };\n    }\n\n    return undefined;\n  }\n  /**\n   *\n   * @param {HTMLElement} listWrapper\n   *\n   * @param {HTMLElement|null}\n   */\n\n\n  getTargetNode(e, listWrapper) {\n    if (e && isElement(listWrapper)) {\n      const targetTagName = 'li';\n      const currentTarget = e.target;\n      const itemNodes = listWrapper.querySelectorAll(targetTagName);\n      const list = this.getProp('list');\n      const length = Array.isArray(list) ? list.length : 0;\n      let targetIndex = -1;\n      let indexInList = -1;\n      let infoInList = null;\n\n      const targetNode = _find(itemNodes, (node, index) => {\n        if (node === currentTarget || node.contains(currentTarget)) {\n          targetIndex = index;\n\n          if (length > 0) {\n            indexInList = index % length;\n          }\n\n          return true;\n        }\n\n        return undefined;\n      });\n\n      if (indexInList > -1) {\n        infoInList = list[indexInList];\n      }\n\n      return {\n        targetNode,\n        targetIndex,\n        indexInList,\n        infoInList\n      };\n    }\n\n    return null;\n  }\n\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,uBAAuB;AACvB,kBAAkB;AAClB,mBAAmB;AAInB,IAAqB,iBAArB,cAA4C,mBAAe;AAAA,EACzD,cAAc;AACZ,UAAM,GAAG,SAAS;AAClB,SAAK,sBAAsB;AAAA,EAC7B;AAAA,EAEA,YAAY,OAAO,aAAa;AAC9B,UAAM;AAAA,MACJ;AAAA,MACA;AAAA,IACF,IAAI,KAAK,SAAS;AAElB,QAAI,QAAQ,MAAM,MAAM,QAAQ,IAAI,KAAK,KAAK,UAAU,UAAU,WAAW,GAAG;AAC9E,YAAM,cAAc,QAAQ,KAAK;AACjC,YAAM,OAAO,KAAK,WAAW;AAC7B,YAAM,OAAO,YAAY,SAAS,KAAK;AAEvC,WAAK,SAAS,gBAAgB,IAAI;AAElC,WAAK,SAAS,iBAAiB,OAAO,OAAO,OAAO,OAAO,CAAC,GAAG,IAAI,GAAG;AAAA,QACpE,OAAO,KAAK;AAAA,QACZ;AAAA,QACA,OAAO;AAAA,MACT,CAAC,CAAC;AAAA,IACJ;AAAA,EACF;AAAA,EAEA,WAAW,MAAM,aAAa;AAC5B,UAAM;AAAA,MACJ;AAAA,MACA,MAAM;AAAA,IACR,IAAI,KAAK,SAAS;AAElB,QAAI,UAAU,IAAI,KAAK,UAAU,WAAW,GAAG;AAC7C,YAAM,kBAAc,iBAAAA,SAAW,YAAY,UAAU,SAAO,QAAQ,IAAI;AAExE,YAAM,cAAc,cAAc,KAAK;AAEvC,YAAM,wBAAoB,iBAAAA,SAAW,YAAY,UAAU,SAAO,QAAQ,KAAK,mBAAmB;AAElG,YAAM,kBAAkB,oBAAoB,KAAK;AACjD,YAAM,OAAO,KAAK,WAAW;AAE7B,WAAK,SAAS,gBAAgB,IAAI;AAElC,WAAK,SAAS,eAAe,IAAI;AAKjC,UAAI,KAAK,wBAAwB,MAAM;AACrC,aAAK,sBAAsB;AAE3B,YAAI,oBAAoB,aAAa;AACnC,eAAK,SAAS,iBAAiB,OAAO,OAAO,OAAO,OAAO,CAAC,GAAG,IAAI,GAAG;AAAA,YACpE,OAAO,KAAK;AAAA,YACZ;AAAA,YACA,OAAO;AAAA,UACT,CAAC,CAAC;AAAA,QACJ;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,aAAa,aAAa,eAAe;AACvC,QAAI,QAAQ,UAAU,SAAS,KAAK,UAAU,CAAC,MAAM,SAAY,UAAU,CAAC,IAAI;AAChF,UAAM,MAAM;AAEZ,QAAI,UAAU,WAAW,KAAK,UAAU,aAAa,GAAG;AACtD,YAAM,YAAY,YAAY,iBAAiB,GAAG;AAClD,YAAM,WAAW,UAAU,UAAU,SAAS,CAAC;AAC/C,YAAM;AAAA,QACJ;AAAA,MACF,IAAI,KAAK,SAAS;AAElB,UAAI,UAAU;AACZ,cAAM,aAAa,cAAc,sBAAsB;AACvD,cAAM,WAAW,SAAS,sBAAsB;AAChD,cAAM,aAAa,SAAS,SAAS,KAAK;AAC1C,YAAI,UAAU,SAAS;AACvB,YAAI,QAAQ;AAEZ,eAAO,WAAW,WAAW,MAAM,WAAW,SAAS,OAAO;AAC5D,mBAAS;AACT,qBAAW;AAAA,QACb;AAEA,eAAO;AAAA,MACT;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,cAAc,aAAa,eAAe;AACxC,QAAI,QAAQ,UAAU,SAAS,KAAK,UAAU,CAAC,MAAM,SAAY,UAAU,CAAC,IAAI;AAChF,UAAM,MAAM;AAEZ,QAAI,UAAU,WAAW,KAAK,UAAU,aAAa,GAAG;AACtD,YAAM,YAAY,YAAY,iBAAiB,GAAG;AAClD,YAAM,YAAY,UAAU,CAAC;AAC7B,YAAM;AAAA,QACJ;AAAA,MACF,IAAI,KAAK,SAAS;AAElB,UAAI,WAAW;AACb,cAAM,aAAa,cAAc,sBAAsB;AACvD,cAAM,YAAY,UAAU,sBAAsB;AAClD,cAAM,aAAa,UAAU,SAAS,KAAK;AAC3C,YAAI,UAAU,UAAU;AACxB,YAAI,QAAQ;AAEZ,eAAO,UAAU,UAAU,UAAU,WAAW,MAAM,WAAW,SAAS,OAAO;AAC/E,mBAAS;AACT,qBAAW;AAAA,QACb;AAEA,eAAO;AAAA,MACT;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,cAAc,aAAa,SAAS,UAAU;AAC5C,UAAM;AAAA,MACJ;AAAA,IACF,IAAI,KAAK,SAAS;AAElB,QAAI,UAAU,OAAO,KAAK,UAAU,WAAW,KAAK,QAAQ,KAAK,QAAQ;AACvE,YAAM,WAAW,YAAY;AAE7B,YAAM,gBAAY,aAAAC,SAAO,UAAU,GAAG,KAAK,MAAM;AAEjD,YAAM,eAAe,KAAK,cAAc,aAAa,OAAO;AAC5D,YAAM,cAAc,KAAK,aAAa,aAAa,OAAO;AAG1D,WAAK,SAAS,SAAS;AAAA,QACrB;AAAA,QACA;AAAA,MACF,GAAG,QAAQ;AAAA,IACb;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,mBAAmB,aAAa,SAAS,aAAa;AACpD,UAAM;AAAA,MACJ;AAAA,IACF,IAAI,KAAK,SAAS;AAClB,UAAM,UAAU;AAEhB,QAAI,UAAU,OAAO,KAAK,UAAU,WAAW,KAAK,QAAQ,KAAK,QAAQ;AACvE,YAAM,WAAW,YAAY,iBAAiB,OAAO;AACrD,YAAM,QAAQ,SAAS;AACvB,YAAM,QAAQ;AACd,YAAM,eAAe,KAAK,cAAc,aAAa,SAAS,KAAK;AACnE,YAAM,cAAc,KAAK,aAAa,aAAa,SAAS,KAAK;AAEjE,UAAI,cAAc;AAEhB,iBAAS,IAAI,GAAG,IAAI,cAAc,KAAK;AACrC,gBAAM,YAAQ,aAAAA,SAAO,UAAU,QAAQ,KAAK,UAAU,IAAI,IAAI,QAAQ,KAAK,SAAS,CAAC;AAErF,kBAAQ,aAAa,GAAG,KAAK;AAAA,QAC/B;AAAA,MACF;AAGA,UAAI,aAAa;AACf,iBAAS,IAAI,GAAG,IAAI,aAAa,KAAK;AACpC,gBAAM,YAAQ,aAAAA,SAAO,UAAU,IAAI,KAAK,SAAS,IAAI,KAAK,KAAK,MAAM;AAErE,iBAAO,aAAa,GAAG,KAAK;AAAA,QAC9B;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,mBAAmB,aAAa,UAAU;AACxC,QAAI,UAAU,WAAW,KAAK,UAAU,QAAQ,GAAG;AACjD,YAAM,eAAe,SAAS,sBAAsB;AACpD,YAAM,cAAc,aAAa;AACjC,YAAM,YAAY,YAAY,iBAAiB,IAAI;AACnD,UAAI,cAAc;AAClB,UAAI,eAAe;AACnB,UAAI,kBAAkB;AACtB,YAAM,KAAK,SAAS,EAAE,IAAI,CAAC,MAAM,UAAU;AACzC,cAAM,OAAO,KAAK,sBAAsB;AACxC,cAAM,UAAU,KAAK;AACrB,cAAM,cAAc,KAAK,IAAI,UAAU,WAAW;AAElD,YAAI,cAAc,mBAAmB,CAAC,KAAK,SAAS,gBAAgB,KAAK,GAAG;AAC1E,4BAAkB;AAClB,wBAAc;AACd,yBAAe;AAAA,QACjB;AAAA,MACF,CAAC;AACD,aAAO;AAAA,QACL;AAAA,QACA;AAAA,MACF;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,cAAc,GAAG,aAAa;AAC5B,QAAI,KAAK,UAAU,WAAW,GAAG;AAC/B,YAAM,gBAAgB;AACtB,YAAM,gBAAgB,EAAE;AACxB,YAAM,YAAY,YAAY,iBAAiB,aAAa;AAC5D,YAAM,OAAO,KAAK,QAAQ,MAAM;AAChC,YAAM,SAAS,MAAM,QAAQ,IAAI,IAAI,KAAK,SAAS;AACnD,UAAI,cAAc;AAClB,UAAI,cAAc;AAClB,UAAI,aAAa;AAEjB,YAAM,iBAAa,YAAAC,SAAM,WAAW,CAAC,MAAM,UAAU;AACnD,YAAI,SAAS,iBAAiB,KAAK,SAAS,aAAa,GAAG;AAC1D,wBAAc;AAEd,cAAI,SAAS,GAAG;AACd,0BAAc,QAAQ;AAAA,UACxB;AAEA,iBAAO;AAAA,QACT;AAEA,eAAO;AAAA,MACT,CAAC;AAED,UAAI,cAAc,IAAI;AACpB,qBAAa,KAAK,WAAW;AAAA,MAC/B;AAEA,aAAO;AAAA,QACL;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAEF;",
  "names": ["_findIndex", "_slice", "_find"]
}
