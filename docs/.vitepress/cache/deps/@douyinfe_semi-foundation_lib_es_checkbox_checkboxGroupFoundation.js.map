{
  "version": 3,
  "sources": ["../../../../node_modules/.pnpm/@douyinfe+semi-foundation@2.34.0/node_modules/@douyinfe/semi-foundation/lib/es/checkbox/checkboxGroupFoundation.js"],
  "sourcesContent": ["import BaseFoundation from '../base/foundation';\nimport warning from '../utils/warning';\n\nclass CheckboxGroupFoundation extends BaseFoundation {\n  static get checkboxGroupDefaultAdapter() {\n    return {};\n  }\n\n  constructor(adapter) {\n    super(Object.assign(Object.assign({}, CheckboxGroupFoundation.checkboxGroupDefaultAdapter), adapter));\n  }\n\n  init() {\n    const {\n      defaultValue,\n      value\n    } = this.getProps();\n\n    if (typeof defaultValue !== 'undefined' && !Array.isArray(defaultValue)) {\n      warning(true, 'Warning: [Semi CheckboxGroup] defaultValue should be an Array');\n    }\n\n    if (typeof value !== 'undefined' && !Array.isArray(value)) {\n      warning(true, 'Warning: [Semi CheckboxGroup] value should be an Array');\n    }\n  }\n\n  notifyChange(value) {\n    this._adapter.notifyChange(value);\n  }\n\n  handleChange(evt) {\n    const prevValue = this.getState('value');\n    let newValue = [];\n\n    if (!Array.isArray(prevValue)) {\n      newValue = [prevValue];\n    }\n\n    if (evt.target.checked) {\n      newValue = [...prevValue, evt.target.value];\n    } else {\n      newValue = prevValue.filter((itm, idx) => itm !== evt.target.value);\n    }\n\n    const isControlledMode = ('value' in this.getProps());\n\n    if (isControlledMode) {\n      // Controlled mode only needs to notify\n      this.notifyChange(newValue);\n    } else {\n      // In uncontrolled mode, update the value in the state, and then notify\n      this._adapter.updateGroupValue(newValue);\n\n      this.notifyChange(newValue);\n    }\n  }\n\n  getFormatName() {\n    const propName = this.getProp('name');\n    const defaultName = 'default';\n    return propName || defaultName;\n  }\n\n  handlePropValueChange(newPropValue) {\n    if (Array.isArray(newPropValue)) {\n      this._adapter.updateGroupValue(newPropValue);\n    } else {\n      // to adjust reset in Form.CheckboxGroup\n      if (typeof newPropValue === 'undefined') {\n        this._adapter.updateGroupValue([]);\n      }\n\n      warning(true, 'Warning: [Semi CheckboxGroup] value should be an Array');\n    }\n  } // eslint-disable-next-line @typescript-eslint/no-empty-function\n\n\n  destroy() {}\n\n}\n\nexport default CheckboxGroupFoundation;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAGA,IAAM,0BAAN,cAAsC,mBAAe;AAAA,EACnD,WAAW,8BAA8B;AACvC,WAAO,CAAC;AAAA,EACV;AAAA,EAEA,YAAY,SAAS;AACnB,UAAM,OAAO,OAAO,OAAO,OAAO,CAAC,GAAG,wBAAwB,2BAA2B,GAAG,OAAO,CAAC;AAAA,EACtG;AAAA,EAEA,OAAO;AACL,UAAM;AAAA,MACJ;AAAA,MACA;AAAA,IACF,IAAI,KAAK,SAAS;AAElB,QAAI,OAAO,iBAAiB,eAAe,CAAC,MAAM,QAAQ,YAAY,GAAG;AACvE,cAAQ,MAAM,+DAA+D;AAAA,IAC/E;AAEA,QAAI,OAAO,UAAU,eAAe,CAAC,MAAM,QAAQ,KAAK,GAAG;AACzD,cAAQ,MAAM,wDAAwD;AAAA,IACxE;AAAA,EACF;AAAA,EAEA,aAAa,OAAO;AAClB,SAAK,SAAS,aAAa,KAAK;AAAA,EAClC;AAAA,EAEA,aAAa,KAAK;AAChB,UAAM,YAAY,KAAK,SAAS,OAAO;AACvC,QAAI,WAAW,CAAC;AAEhB,QAAI,CAAC,MAAM,QAAQ,SAAS,GAAG;AAC7B,iBAAW,CAAC,SAAS;AAAA,IACvB;AAEA,QAAI,IAAI,OAAO,SAAS;AACtB,iBAAW,CAAC,GAAG,WAAW,IAAI,OAAO,KAAK;AAAA,IAC5C,OAAO;AACL,iBAAW,UAAU,OAAO,CAAC,KAAK,QAAQ,QAAQ,IAAI,OAAO,KAAK;AAAA,IACpE;AAEA,UAAM,mBAAoB,WAAW,KAAK,SAAS;AAEnD,QAAI,kBAAkB;AAEpB,WAAK,aAAa,QAAQ;AAAA,IAC5B,OAAO;AAEL,WAAK,SAAS,iBAAiB,QAAQ;AAEvC,WAAK,aAAa,QAAQ;AAAA,IAC5B;AAAA,EACF;AAAA,EAEA,gBAAgB;AACd,UAAM,WAAW,KAAK,QAAQ,MAAM;AACpC,UAAM,cAAc;AACpB,WAAO,YAAY;AAAA,EACrB;AAAA,EAEA,sBAAsB,cAAc;AAClC,QAAI,MAAM,QAAQ,YAAY,GAAG;AAC/B,WAAK,SAAS,iBAAiB,YAAY;AAAA,IAC7C,OAAO;AAEL,UAAI,OAAO,iBAAiB,aAAa;AACvC,aAAK,SAAS,iBAAiB,CAAC,CAAC;AAAA,MACnC;AAEA,cAAQ,MAAM,wDAAwD;AAAA,IACxE;AAAA,EACF;AAAA;AAAA,EAGA,UAAU;AAAA,EAAC;AAEb;AAEA,IAAO,kCAAQ;",
  "names": []
}
